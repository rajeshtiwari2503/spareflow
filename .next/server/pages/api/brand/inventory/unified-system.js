"use strict";(()=>{var exports={};exports.id="pages/api/brand/inventory/unified-system",exports.ids=["pages/api/brand/inventory/unified-system"],exports.modules={"@prisma/client/edge":n=>{n.exports=require("@prisma/client/edge")},bcryptjs:n=>{n.exports=require("bcryptjs")},jsonwebtoken:n=>{n.exports=require("jsonwebtoken")},"next/dist/compiled/next-server/pages-api.runtime.dev.js":n=>{n.exports=require("next/dist/compiled/next-server/pages-api.runtime.dev.js")},"@prisma/extension-accelerate":n=>{n.exports=import("@prisma/extension-accelerate")},"(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbrand%2Finventory%2Funified-system&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cbrand%5Cinventory%5Cunified-system.ts&middlewareConfigBase64=e30%3D!":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ "(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ "(api)/./node_modules/next/dist/server/future/route-kind.js");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ "(api)/./node_modules/next/dist/build/templates/helpers.js");\n/* harmony import */ var _src_pages_api_brand_inventory_unified_system_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\brand\\inventory\\unified-system.ts */ "(api)/./src/pages/api/brand/inventory/unified-system.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_brand_inventory_unified_system_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_brand_inventory_unified_system_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_brand_inventory_unified_system_ts__WEBPACK_IMPORTED_MODULE_3__, "default"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_brand_inventory_unified_system_ts__WEBPACK_IMPORTED_MODULE_3__, "config");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: "/api/brand/inventory/unified-system",\n        pathname: "/api/brand/inventory/unified-system",\n        // The following aren\'t used in production.\n        bundlePath: "",\n        filename: ""\n    },\n    userland: _src_pages_api_brand_inventory_unified_system_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmJyYW5kJTJGaW52ZW50b3J5JTJGdW5pZmllZC1zeXN0ZW0mcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlNUNwYWdlcyU1Q2FwaSU1Q2JyYW5kJTVDaW52ZW50b3J5JTVDdW5pZmllZC1zeXN0ZW0udHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUY7QUFDbkY7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDZFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw2RUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8/ZWY3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxicmFuZFxcXFxpbnZlbnRvcnlcXFxcdW5pZmllZC1zeXN0ZW0udHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9icmFuZC9pbnZlbnRvcnkvdW5pZmllZC1zeXN0ZW1cIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9icmFuZC9pbnZlbnRvcnkvdW5pZmllZC1zeXN0ZW1cIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbrand%2Finventory%2Funified-system&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cbrand%5Cinventory%5Cunified-system.ts&middlewareConfigBase64=e30%3D!\n')},"(api)/./src/lib/auth.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   getUserFromRequest: () => (/* binding */ getUserFromRequest),\n/* harmony export */   getUserFromToken: () => (/* binding */ getUserFromToken),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   verifyAuth: () => (/* binding */ verifyAuth),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken),\n/* harmony export */   verifyTokenString: () => (/* binding */ verifyTokenString),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthAndRole: () => (/* binding */ withAuthAndRole)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ "bcryptjs");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || "your-secret-key-change-in-production";\n// Hash password\nasync function hashPassword(password) {\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().hash(password, 12);\n}\n// Verify password\nasync function verifyPassword(password, hashedPassword) {\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().compare(password, hashedPassword);\n}\n// Generate JWT token\nfunction generateToken(user) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n        user\n    }, JWT_SECRET, {\n        expiresIn: "7d"\n    });\n}\n// Verify JWT token (string version)\nfunction verifyTokenString(token) {\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        // Handle both old and new token formats\n        if (decoded.user) {\n            return decoded;\n        } else if (decoded.userId) {\n            // Convert old format to new format\n            return {\n                user: {\n                    id: decoded.userId,\n                    email: decoded.email || "",\n                    name: decoded.name || "",\n                    role: decoded.role || "CUSTOMER"\n                },\n                iat: decoded.iat,\n                exp: decoded.exp\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error("Token verification error:", error);\n        return null;\n    }\n}\n// Get user from token\nasync function getUserFromToken(token) {\n    const decoded = verifyTokenString(token);\n    if (!decoded) return null;\n    try {\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: decoded.user.id\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error("Error fetching user from token:", error);\n        return null;\n    }\n}\n// Enhanced verifyToken function for API requests\nasync function verifyToken(req) {\n    try {\n        // Try to get token from Authorization header first, then from cookies\n        let token = req.headers.authorization?.replace("Bearer ", "");\n        if (!token && req.cookies.token) {\n            token = req.cookies.token;\n        }\n        if (!token) {\n            return null;\n        }\n        // Verify and decode token\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        let userId;\n        // Handle both token formats\n        if (decoded.user?.id) {\n            userId = decoded.user.id;\n        } else if (decoded.userId) {\n            userId = decoded.userId;\n        } else {\n            return null;\n        }\n        // Fetch fresh user data from database\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: userId\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error("Token verification error:", error);\n        return null;\n    }\n}\n// Middleware to protect API routes\nfunction withAuth(handler) {\n    return async (req, res)=>{\n        try {\n            // Try to get token from Authorization header first, then from cookies\n            let token = req.headers.authorization?.replace("Bearer ", "");\n            if (!token && req.cookies.token) {\n                token = req.cookies.token;\n            }\n            console.log("Auth middleware - Token present:", !!token);\n            console.log("Auth middleware - Headers:", req.headers.authorization ? "Authorization header present" : "No authorization header");\n            console.log("Auth middleware - Cookies:", req.cookies.token ? "Token cookie present" : "No token cookie");\n            if (!token) {\n                console.log("Auth middleware - No token provided");\n                return res.status(401).json({\n                    error: "No token provided"\n                });\n            }\n            const user = await getUserFromToken(token);\n            if (!user) {\n                console.log("Auth middleware - Invalid token");\n                return res.status(401).json({\n                    error: "Invalid token"\n                });\n            }\n            console.log("Auth middleware - User authenticated:", user.email, user.role);\n            return handler(req, res, user);\n        } catch (error) {\n            console.error("Auth middleware error:", error);\n            return res.status(500).json({\n                error: "Authentication error"\n            });\n        }\n    };\n}\n// Middleware to protect API routes with role check\nfunction withAuthAndRole(roles, handler) {\n    return withAuth(async (req, res, user)=>{\n        if (!roles.includes(user.role)) {\n            return res.status(403).json({\n                error: "Insufficient permissions"\n            });\n        }\n        return handler(req, res, user);\n    });\n}\n// Get user from request (for pages)\nasync function getUserFromRequest(req) {\n    const token = req.headers.authorization?.replace("Bearer ", "") || req.cookies.token;\n    if (!token) return null;\n    return getUserFromToken(token);\n}\n// Verify auth for API routes with proper result format\nasync function verifyAuth(req) {\n    try {\n        const user = await verifyToken(req);\n        if (user) {\n            return {\n                success: true,\n                user\n            };\n        } else {\n            return {\n                success: false,\n                error: "Authentication failed"\n            };\n        }\n    } catch (error) {\n        console.error("Auth verification error:", error);\n        return {\n            success: false,\n            error: "Authentication error"\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/auth.ts\n')},"(api)/./src/lib/prisma.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/edge */ "@prisma/client/edge");\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/extension-accelerate */ "@prisma/extension-accelerate");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__]);\n_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__.PrismaClient().$extends((0,_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__.withAccelerate)());\nif (true) globalForPrisma.prisma = prisma;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtEO0FBQ1c7QUFFN0QsTUFBTUUsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSiw2REFBWUEsR0FBR0ssUUFBUSxDQUFDSiw0RUFBY0EsSUFBRztBQUU3RixJQUFJSyxJQUF5QixFQUFjSixnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8uL3NyYy9saWIvcHJpc21hLnRzPzAxZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQvZWRnZSdcclxuaW1wb3J0IHsgd2l0aEFjY2VsZXJhdGUgfSBmcm9tICdAcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlJ1xyXG5cclxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcclxuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCkuJGV4dGVuZHMod2l0aEFjY2VsZXJhdGUoKSlcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsIndpdGhBY2NlbGVyYXRlIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsIiRleHRlbmRzIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/prisma.ts\n')},"(api)/./src/pages/api/brand/inventory/unified-system.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/auth */ "(api)/./src/lib/auth.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__, _lib_auth__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__, _lib_auth__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nasync function handler(req, res) {\n    try {\n        const user = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_1__.verifyToken)(req);\n        if (!user) {\n            return res.status(401).json({\n                error: "Unauthorized"\n            });\n        }\n        if (user.role !== "BRAND") {\n            return res.status(403).json({\n                error: "Access denied. Brand role required."\n            });\n        }\n        if (req.method === "GET") {\n            const brandId = req.query.brandId || user.id;\n            // Get comprehensive unified inventory data\n            const [inventory, movements, locations, suppliers, forwardFlow, reverseFlow, alerts] = await Promise.all([\n                // Enhanced inventory with complete tracking\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.brandInventory.findMany({\n                    where: {\n                        brandId\n                    },\n                    include: {\n                        part: {\n                            select: {\n                                id: true,\n                                code: true,\n                                name: true,\n                                partNumber: true,\n                                category: true,\n                                subCategory: true,\n                                price: true,\n                                weight: true,\n                                length: true,\n                                breadth: true,\n                                height: true,\n                                minStockLevel: true,\n                                maxStockLevel: true,\n                                reorderPoint: true,\n                                reorderQty: true,\n                                costPrice: true,\n                                sellingPrice: true,\n                                warranty: true,\n                                specifications: true,\n                                tags: true,\n                                status: true,\n                                featured: true,\n                                isActive: true,\n                                createdAt: true,\n                                updatedAt: true\n                            }\n                        }\n                    },\n                    orderBy: {\n                        lastUpdated: "desc"\n                    }\n                }),\n                // Recent movements with enhanced tracking\n                _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.inventoryLedger.findMany({\n                    where: {\n                        brandId,\n                        createdAt: {\n                            gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days\n                        }\n                    },\n                    include: {\n                        part: {\n                            select: {\n                                code: true,\n                                name: true,\n                                partNumber: true,\n                                category: true\n                            }\n                        },\n                        shipment: {\n                            select: {\n                                id: true,\n                                awbNumber: true,\n                                status: true,\n                                recipientType: true\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: "desc"\n                    },\n                    take: 100\n                }),\n                // Enhanced locations\n                generateLocationsData(),\n                // Enhanced suppliers\n                generateSuppliersData(),\n                // Forward flow tracking\n                generateForwardFlowData(brandId),\n                // Reverse flow tracking\n                generateReverseFlowData(brandId),\n                // Generate comprehensive alerts\n                generateUnifiedAlerts(brandId)\n            ]);\n            // Calculate comprehensive summary\n            const summary = {\n                totalParts: inventory.length,\n                totalValue: inventory.reduce((sum, item)=>sum + item.onHandQuantity * (item.part.price || 0), 0),\n                lowStockItems: inventory.filter((item)=>item.onHandQuantity <= (item.part.minStockLevel || 5)).length,\n                outOfStockItems: inventory.filter((item)=>item.onHandQuantity === 0).length,\n                totalLocations: locations.length,\n                totalSuppliers: suppliers.length,\n                avgTurnoverRate: 3.2,\n                totalMovements: movements.length,\n                forwardFlowVolume: forwardFlow.length,\n                reverseFlowVolume: reverseFlow.length,\n                flowEfficiency: 87.5\n            };\n            // Transform inventory data with enhanced tracking\n            const enhancedInventory = inventory.map((item, index)=>{\n                const locationIndex = index % locations.length;\n                const supplierIndex = index % suppliers.length;\n                // Calculate realistic quantities based on actual stock\n                const defectiveQty = Math.floor(item.onHandQuantity * (0.01 + Math.random() * 0.02));\n                const quarantineQty = Math.floor(item.onHandQuantity * (0.005 + Math.random() * 0.01));\n                const reservedQty = Math.floor(item.onHandQuantity * (Math.random() * 0.08));\n                const inTransitQty = Math.floor(Math.random() * 15);\n                return {\n                    id: item.id,\n                    partId: item.partId,\n                    locationId: locations[locationIndex].id,\n                    supplierId: suppliers[supplierIndex].id,\n                    onHandQuantity: item.onHandQuantity,\n                    availableQuantity: Math.max(0, item.onHandQuantity - defectiveQty - quarantineQty - reservedQty),\n                    reservedQuantity: reservedQty,\n                    allocatedQuantity: Math.floor(reservedQty * 0.8),\n                    inTransitQuantity: inTransitQty,\n                    defectiveQuantity: defectiveQty,\n                    quarantineQuantity: quarantineQty,\n                    lastRestocked: item.lastRestocked,\n                    lastIssued: item.lastIssued,\n                    lastCounted: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n                    lastMovement: movements.find((m)=>m.partId === item.partId)?.createdAt || null,\n                    averageCost: item.averageCost || item.part.costPrice || item.part.price * 0.8,\n                    lastCost: item.lastCost || item.part.costPrice || item.part.price * 0.8,\n                    standardCost: item.part.costPrice || item.part.price * 0.8,\n                    fifoValue: item.onHandQuantity * (item.part.costPrice || item.part.price * 0.8),\n                    lifoValue: item.onHandQuantity * (item.part.costPrice || item.part.price * 0.85),\n                    weightedAvgCost: item.averageCost || item.part.costPrice || item.part.price * 0.82,\n                    part: {\n                        ...item.part,\n                        dimensions: item.part.length && item.part.breadth && item.part.height ? `${item.part.length}x${item.part.breadth}x${item.part.height}cm` : null,\n                        serialized: item.part.price > 5000,\n                        batchTracked: [\n                            "ELECTRONICS",\n                            "AUTOMOTIVE"\n                        ].includes(item.part.category?.toUpperCase() || ""),\n                        expiryTracked: [\n                            "CONSUMABLES",\n                            "CHEMICALS"\n                        ].includes(item.part.category?.toUpperCase() || ""),\n                        hazardous: item.part.name?.toLowerCase().includes("chemical") || false,\n                        controlled: item.part.price > 10000,\n                        abc_classification: getABCClassification(item.onHandQuantity * item.part.price),\n                        xyz_classification: getXYZClassification(),\n                        leadTime: suppliers[supplierIndex].leadTime,\n                        shelfLife: [\n                            "CONSUMABLES"\n                        ].includes(item.part.category?.toUpperCase() || "") ? 365 : null,\n                        storageConditions: item.part.category?.toLowerCase().includes("electronic") ? "Dry, temperature controlled" : null\n                    },\n                    location: locations[locationIndex],\n                    supplier: suppliers[supplierIndex],\n                    batches: item.part.category?.toLowerCase().includes("electronic") ? [\n                        {\n                            id: `batch_${item.id}_1`,\n                            batchNumber: `B${Date.now().toString().slice(-6)}`,\n                            partId: item.partId,\n                            locationId: locations[locationIndex].id,\n                            quantity: Math.floor(item.onHandQuantity * 0.6),\n                            manufactureDate: new Date(Date.now() - Math.random() * 180 * 24 * 60 * 60 * 1000).toISOString(),\n                            expiryDate: null,\n                            supplierId: suppliers[supplierIndex].id,\n                            qualityStatus: "GOOD",\n                            notes: "Primary batch"\n                        }\n                    ] : [],\n                    serials: item.part.price > 5000 ? Array.from({\n                        length: Math.min(3, item.onHandQuantity)\n                    }, (_, i)=>({\n                            id: `serial_${item.id}_${i}`,\n                            serialNumber: `SN${Date.now().toString().slice(-8)}${i.toString().padStart(2, "0")}`,\n                            partId: item.partId,\n                            locationId: locations[locationIndex].id,\n                            status: "AVAILABLE",\n                            manufactureDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString(),\n                            warrantyExpiry: new Date(Date.now() + (365 + Math.random() * 365) * 24 * 60 * 60 * 1000).toISOString(),\n                            notes: `Serial item ${i + 1}`\n                        })) : []\n                };\n            });\n            // Transform movements with flow tracking\n            const enhancedMovements = movements.map((movement)=>({\n                    id: movement.id,\n                    type: mapActionTypeToMovementType(movement.actionType),\n                    subType: movement.actionType,\n                    partId: movement.partId,\n                    fromLocationId: getFromLocation(movement.source),\n                    toLocationId: getToLocation(movement.destination),\n                    quantity: movement.quantity,\n                    unitCost: movement.unitCost,\n                    totalValue: movement.totalValue,\n                    reason: movement.referenceNote || "Stock movement",\n                    reference: movement.shipmentId,\n                    batchNumber: null,\n                    serialNumbers: [],\n                    expiryDate: null,\n                    qualityStatus: "GOOD",\n                    approvedBy: movement.createdBy,\n                    performedBy: movement.createdBy || "SYSTEM",\n                    timestamp: movement.createdAt,\n                    notes: movement.referenceNote,\n                    attachments: [],\n                    flowDirection: getFlowDirection(movement.actionType),\n                    flowStage: getFlowStage(movement.source, movement.destination),\n                    chainOfCustody: [\n                        movement.source,\n                        movement.destination\n                    ].filter(Boolean)\n                }));\n            // Generate analytics data\n            const analytics = await generateAnalyticsData(brandId, enhancedInventory);\n            // Generate forecasting data\n            const forecasting = await generateForecastingData(brandId, enhancedInventory);\n            // Generate AI insights\n            const aiInsights = generateAIInsights(enhancedInventory, enhancedMovements, forwardFlow, reverseFlow);\n            return res.status(200).json({\n                success: true,\n                data: {\n                    summary,\n                    inventory: enhancedInventory,\n                    movements: enhancedMovements,\n                    locations,\n                    suppliers,\n                    forwardFlow,\n                    reverseFlow,\n                    alerts,\n                    analytics,\n                    forecasting,\n                    aiInsights\n                }\n            });\n        }\n        return res.status(405).json({\n            error: "Method not allowed"\n        });\n    } catch (error) {\n        console.error("Unified inventory system error:", error);\n        return res.status(500).json({\n            error: "Internal server error",\n            details: error instanceof Error ? error.message : "Unknown error"\n        });\n    }\n}\n// Helper functions\nfunction getABCClassification(value) {\n    if (value > 10000) return "A";\n    if (value > 5000) return "B";\n    return "C";\n}\nfunction getXYZClassification() {\n    const random = Math.random();\n    if (random < 0.3) return "X";\n    if (random < 0.6) return "Y";\n    return "Z";\n}\nfunction mapActionTypeToMovementType(actionType) {\n    const mapping = {\n        "ADD": "RECEIPT",\n        "TRANSFER_OUT": "ISSUE",\n        "TRANSFER_IN": "RECEIPT",\n        "REVERSE_IN": "RETURN",\n        "REVERSE_OUT": "ISSUE",\n        "CONSUMED": "ISSUE"\n    };\n    return mapping[actionType] || "ADJUSTMENT";\n}\nfunction getFromLocation(source) {\n    if (source === "BRAND") return "loc1";\n    if (source === "SERVICE_CENTER") return "loc2";\n    if (source === "DISTRIBUTOR") return "loc3";\n    return undefined;\n}\nfunction getToLocation(destination) {\n    if (destination === "BRAND") return "loc1";\n    if (destination === "SERVICE_CENTER") return "loc2";\n    if (destination === "DISTRIBUTOR") return "loc3";\n    return undefined;\n}\nfunction getFlowDirection(actionType) {\n    return actionType.includes("REVERSE") ? "REVERSE" : "FORWARD";\n}\nfunction getFlowStage(source, destination) {\n    return `${source} → ${destination}`;\n}\nfunction generateLocationsData() {\n    return [\n        {\n            id: "loc1",\n            code: "WH001",\n            name: "Main Warehouse",\n            type: "WAREHOUSE",\n            zone: "A",\n            aisle: "01",\n            rack: "R1",\n            shelf: "S1",\n            bin: "B1",\n            capacity: 1000,\n            currentUtilization: 750,\n            temperature: 25,\n            humidity: 60,\n            securityLevel: "HIGH",\n            accessRestricted: false,\n            active: true,\n            address: "Main warehouse address, Industrial Area",\n            coordinates: "28.7041,77.1025",\n            manager: "John Doe",\n            contact: "+91-9876543210",\n            notes: "Primary storage location for all parts"\n        },\n        {\n            id: "loc2",\n            code: "ST001",\n            name: "Store Room",\n            type: "STORE",\n            zone: "B",\n            aisle: "02",\n            rack: "R2",\n            shelf: "S2",\n            bin: "B2",\n            capacity: 500,\n            currentUtilization: 300,\n            temperature: 22,\n            humidity: 55,\n            securityLevel: "MEDIUM",\n            accessRestricted: true,\n            active: true,\n            address: "Store room, Ground floor",\n            coordinates: "28.7041,77.1025",\n            manager: "Jane Smith",\n            contact: "+91-9876543211",\n            notes: "Secondary storage for overflow items"\n        },\n        {\n            id: "loc3",\n            code: "QC001",\n            name: "Quality Control Area",\n            type: "QUARANTINE",\n            zone: "C",\n            aisle: "03",\n            rack: "R3",\n            shelf: "S3",\n            bin: "B3",\n            capacity: 100,\n            currentUtilization: 25,\n            temperature: 20,\n            humidity: 50,\n            securityLevel: "HIGH",\n            accessRestricted: true,\n            active: true,\n            address: "QC Lab, First floor",\n            coordinates: "28.7041,77.1025",\n            manager: "Quality Manager",\n            contact: "+91-9876543212",\n            notes: "Quarantine area for quality inspection"\n        },\n        {\n            id: "loc4",\n            code: "TR001",\n            name: "Transit Hub",\n            type: "TRANSIT",\n            zone: "D",\n            aisle: "04",\n            rack: "R4",\n            shelf: "S4",\n            bin: "B4",\n            capacity: 200,\n            currentUtilization: 150,\n            temperature: 25,\n            humidity: 60,\n            securityLevel: "MEDIUM",\n            accessRestricted: false,\n            active: true,\n            address: "Transit hub, Loading dock",\n            coordinates: "28.7041,77.1025",\n            manager: "Transit Manager",\n            contact: "+91-9876543213",\n            notes: "Temporary storage for in-transit items"\n        }\n    ];\n}\nfunction generateSuppliersData() {\n    return [\n        {\n            id: "sup1",\n            code: "SUP001",\n            name: "Premium Parts Supplier",\n            type: "MANUFACTURER",\n            rating: 4.5,\n            reliability: 95,\n            leadTime: 7,\n            paymentTerms: "NET30",\n            currency: "INR",\n            taxId: "GSTIN123456789",\n            contact: {\n                person: "John Doe",\n                email: "john@premiumparts.com",\n                phone: "+91-9876543210",\n                address: "123 Industrial Area, Mumbai, Maharashtra 400001"\n            },\n            performance: {\n                onTimeDelivery: 95,\n                qualityRating: 4.5,\n                priceCompetitiveness: 4.0,\n                responsiveness: 4.2\n            },\n            certifications: [\n                "ISO9001:2015",\n                "ISO14001:2015",\n                "OHSAS18001"\n            ],\n            active: true\n        },\n        {\n            id: "sup2",\n            code: "SUP002",\n            name: "Quality Components Ltd",\n            type: "DISTRIBUTOR",\n            rating: 4.2,\n            reliability: 88,\n            leadTime: 10,\n            paymentTerms: "NET45",\n            currency: "INR",\n            taxId: "GSTIN987654321",\n            contact: {\n                person: "Jane Smith",\n                email: "jane@qualitycomp.com",\n                phone: "+91-9876543211",\n                address: "456 Business Park, Delhi, Delhi 110001"\n            },\n            performance: {\n                onTimeDelivery: 88,\n                qualityRating: 4.2,\n                priceCompetitiveness: 4.3,\n                responsiveness: 4.0\n            },\n            certifications: [\n                "ISO9001:2015"\n            ],\n            active: true\n        },\n        {\n            id: "sup3",\n            code: "SUP003",\n            name: "Fast Delivery Parts",\n            type: "WHOLESALER",\n            rating: 3.8,\n            reliability: 82,\n            leadTime: 5,\n            paymentTerms: "NET15",\n            currency: "INR",\n            taxId: "GSTIN456789123",\n            contact: {\n                person: "Mike Johnson",\n                email: "mike@fastdelivery.com",\n                phone: "+91-9876543212",\n                address: "789 Logistics Hub, Bangalore, Karnataka 560001"\n            },\n            performance: {\n                onTimeDelivery: 82,\n                qualityRating: 3.8,\n                priceCompetitiveness: 4.5,\n                responsiveness: 4.1\n            },\n            certifications: [],\n            active: true\n        }\n    ];\n}\nasync function generateForwardFlowData(brandId) {\n    // Generate realistic forward flow data based on recent shipments\n    const recentShipments = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.shipment.findMany({\n        where: {\n            brandId,\n            createdAt: {\n                gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n            }\n        },\n        include: {\n            boxes: {\n                include: {\n                    boxParts: {\n                        include: {\n                            part: true\n                        }\n                    }\n                }\n            }\n        },\n        take: 20\n    });\n    return recentShipments.flatMap((shipment)=>shipment.boxes.flatMap((box)=>box.boxParts.map((boxPart)=>({\n                    id: `forward_${shipment.id}_${box.id}_${boxPart.id}`,\n                    type: "FORWARD",\n                    stage: shipment.recipientType === "DISTRIBUTOR" ? "Brand → Distributor" : "Brand → Service Center",\n                    partId: boxPart.partId,\n                    quantity: boxPart.quantity,\n                    fromEntity: "Brand",\n                    toEntity: shipment.recipientType === "DISTRIBUTOR" ? "Distributor" : "Service Center",\n                    shipmentId: shipment.id,\n                    awbNumber: shipment.awbNumber,\n                    status: mapShipmentStatusToFlowStatus(shipment.status),\n                    timestamp: shipment.createdAt.toISOString(),\n                    estimatedDelivery: shipment.expectedDelivery?.toISOString(),\n                    actualDelivery: shipment.actualDelivery?.toISOString(),\n                    notes: shipment.notes\n                }))));\n}\nasync function generateReverseFlowData(brandId) {\n    // Generate realistic reverse flow data based on return requests\n    const reverseRequests = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.reverseRequest.findMany({\n        where: {\n            serviceCenter: {\n                brandServiceCenters: {\n                    some: {\n                        brandId\n                    }\n                }\n            },\n            createdAt: {\n                gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n            }\n        },\n        include: {\n            part: true,\n            serviceCenter: true\n        },\n        take: 15\n    });\n    return reverseRequests.map((request)=>({\n            id: `reverse_${request.id}`,\n            type: "REVERSE",\n            stage: "Service Center → Brand",\n            partId: request.partId,\n            quantity: request.quantity,\n            fromEntity: "Service Center",\n            toEntity: "Brand",\n            awbNumber: request.awbNumber,\n            status: mapReverseStatusToFlowStatus(request.status),\n            timestamp: request.createdAt.toISOString(),\n            reason: request.reason,\n            notes: `Return reason: ${request.reason}`\n        }));\n}\nfunction mapShipmentStatusToFlowStatus(status) {\n    const mapping = {\n        "DELIVERED": "DELIVERED",\n        "IN_TRANSIT": "IN_TRANSIT",\n        "OUT_FOR_DELIVERY": "IN_TRANSIT",\n        "DISPATCHED": "IN_TRANSIT",\n        "PICKUP_COMPLETED": "IN_TRANSIT",\n        "AWB_GENERATED": "INITIATED",\n        "CONFIRMED": "INITIATED"\n    };\n    return mapping[status] || "INITIATED";\n}\nfunction mapReverseStatusToFlowStatus(status) {\n    const mapping = {\n        "RECEIVED": "RECEIVED",\n        "PICKED": "IN_TRANSIT",\n        "APPROVED": "INITIATED",\n        "REQUESTED": "INITIATED"\n    };\n    return mapping[status] || "INITIATED";\n}\nasync function generateUnifiedAlerts(brandId) {\n    const inventory = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.brandInventory.findMany({\n        where: {\n            brandId\n        },\n        include: {\n            part: {\n                select: {\n                    code: true,\n                    name: true,\n                    minStockLevel: true,\n                    maxStockLevel: true\n                }\n            }\n        }\n    });\n    const alerts = [];\n    for (const item of inventory){\n        if (item.onHandQuantity === 0) {\n            alerts.push({\n                id: `alert_${item.id}_out_of_stock`,\n                type: "OUT_OF_STOCK",\n                severity: "CRITICAL",\n                partId: item.partId,\n                locationId: "loc1",\n                title: `Out of Stock: ${item.part.code}`,\n                description: `${item.part.name} is completely out of stock`,\n                actionRequired: true,\n                status: "OPEN",\n                createdAt: new Date().toISOString()\n            });\n        } else if (item.onHandQuantity <= item.part.minStockLevel) {\n            alerts.push({\n                id: `alert_${item.id}_low_stock`,\n                type: "LOW_STOCK",\n                severity: "HIGH",\n                partId: item.partId,\n                locationId: "loc1",\n                title: `Low Stock: ${item.part.code}`,\n                description: `${item.part.name} is below minimum stock level (${item.onHandQuantity}/${item.part.minStockLevel})`,\n                actionRequired: true,\n                status: "OPEN",\n                createdAt: new Date().toISOString()\n            });\n        }\n    }\n    // Add flow disruption alerts\n    alerts.push({\n        id: "flow_alert_1",\n        type: "FLOW_DISRUPTION",\n        severity: "MEDIUM",\n        title: "Delayed Forward Flow",\n        description: "Some shipments are experiencing delays in the Brand → Service Center flow",\n        actionRequired: false,\n        status: "OPEN",\n        createdAt: new Date().toISOString()\n    });\n    return alerts;\n}\nasync function generateAnalyticsData(brandId, inventory) {\n    return {\n        turnoverAnalysis: [],\n        abcAnalysis: [],\n        xyzAnalysis: [],\n        locationUtilization: [],\n        supplierPerformance: [],\n        flowEfficiency: {\n            forwardFlowEfficiency: 87.5,\n            reverseFlowEfficiency: 82.3,\n            averageTransitTime: 3.2,\n            onTimeDeliveryRate: 89.7\n        }\n    };\n}\nasync function generateForecastingData(brandId, inventory) {\n    return {\n        demandForecast: [],\n        reorderRecommendations: [],\n        seasonalPatterns: [],\n        flowPredictions: {\n            expectedForwardVolume: 150,\n            expectedReverseVolume: 25,\n            peakPeriods: [\n                "Q4",\n                "Festival Season"\n            ],\n            bottlenecks: [\n                "Service Center → Customer",\n                "Quality Control"\n            ]\n        }\n    };\n}\nfunction generateAIInsights(inventory, movements, forwardFlow, reverseFlow) {\n    return {\n        demandPrediction: inventory.slice(0, 5).map((item)=>({\n                partId: item.part.code,\n                predictedDemand: Math.floor(item.onHandQuantity * (0.8 + Math.random() * 0.4)),\n                confidence: 75 + Math.random() * 20,\n                timeframe: "30 days",\n                factors: [\n                    "Historical demand",\n                    "Seasonal trends",\n                    "Market conditions"\n                ]\n            })),\n        stockOptimization: inventory.slice(0, 5).map((item)=>({\n                partId: item.part.code,\n                currentStock: item.onHandQuantity,\n                optimalStock: Math.floor(item.onHandQuantity * (0.9 + Math.random() * 0.2)),\n                potentialSavings: Math.floor(Math.random() * 5000),\n                recommendation: "Optimize stock levels based on demand patterns"\n            })),\n        flowOptimization: [\n            {\n                route: "Brand → Service Center",\n                currentEfficiency: 85.2,\n                optimizedEfficiency: 92.1,\n                recommendations: [\n                    "Implement batch shipping for better efficiency",\n                    "Optimize packaging to reduce weight",\n                    "Use express delivery for critical parts"\n                ]\n            },\n            {\n                route: "Service Center → Brand (Reverse)",\n                currentEfficiency: 78.5,\n                optimizedEfficiency: 86.3,\n                recommendations: [\n                    "Streamline return approval process",\n                    "Implement quality gates at service centers",\n                    "Use consolidated return shipments"\n                ]\n            }\n        ],\n        anomalyDetection: [\n            {\n                type: "Unusual Stock Movement",\n                description: "Detected abnormal stock consumption pattern for electronic components",\n                severity: "MEDIUM",\n                affectedParts: [\n                    "ELEC001",\n                    "ELEC002"\n                ],\n                recommendation: "Review service center consumption patterns and investigate potential issues"\n            },\n            {\n                type: "Flow Bottleneck",\n                description: "Reverse flow efficiency has decreased by 15% in the last week",\n                severity: "HIGH",\n                affectedParts: [\n                    "MECH001",\n                    "AUTO001"\n                ],\n                recommendation: "Investigate return processing delays and optimize reverse logistics"\n            }\n        ]\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/brand/inventory/unified-system.ts\n')}};var __webpack_require__=require("../../../../webpack-api-runtime.js");__webpack_require__.C(exports);var __webpack_exec__=n=>__webpack_require__(__webpack_require__.s=n),__webpack_exports__=__webpack_require__.X(0,["vendor-chunks/next"],()=>__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fbrand%2Finventory%2Funified-system&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cbrand%5Cinventory%5Cunified-system.ts&middlewareConfigBase64=e30%3D!"));module.exports=__webpack_exports__})();