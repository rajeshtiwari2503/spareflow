"use strict";(()=>{var exports={};exports.id="pages/api/parts",exports.ids=["pages/api/parts"],exports.modules={"@prisma/client/edge":c=>{c.exports=require("@prisma/client/edge")},bcryptjs:c=>{c.exports=require("bcryptjs")},jsonwebtoken:c=>{c.exports=require("jsonwebtoken")},"next/dist/compiled/next-server/pages-api.runtime.dev.js":c=>{c.exports=require("next/dist/compiled/next-server/pages-api.runtime.dev.js")},"@prisma/extension-accelerate":c=>{c.exports=import("@prisma/extension-accelerate")},"(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fparts&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cparts.ts&middlewareConfigBase64=e30%3D!":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ "(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ "(api)/./node_modules/next/dist/server/future/route-kind.js");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ "(api)/./node_modules/next/dist/build/templates/helpers.js");\n/* harmony import */ var _src_pages_api_parts_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\parts.ts */ "(api)/./src/pages/api/parts.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_parts_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_parts_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_parts_ts__WEBPACK_IMPORTED_MODULE_3__, "default"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_parts_ts__WEBPACK_IMPORTED_MODULE_3__, "config");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: "/api/parts",\n        pathname: "/api/parts",\n        // The following aren\'t used in production.\n        bundlePath: "",\n        filename: ""\n    },\n    userland: _src_pages_api_parts_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnBhcnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGc3JjJTVDcGFnZXMlNUNhcGklNUNwYXJ0cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN3RDtBQUN4RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsb0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLG9EQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtcGFnZXMtY2hha3JhLz9iMDI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9zcmNcXFxccGFnZXNcXFxcYXBpXFxcXHBhcnRzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcGFydHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wYXJ0c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fparts&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cparts.ts&middlewareConfigBase64=e30%3D!\n')},"(api)/./src/lib/auth.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   getUserFromRequest: () => (/* binding */ getUserFromRequest),\n/* harmony export */   getUserFromToken: () => (/* binding */ getUserFromToken),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   verifyAuth: () => (/* binding */ verifyAuth),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken),\n/* harmony export */   verifyTokenString: () => (/* binding */ verifyTokenString),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthAndRole: () => (/* binding */ withAuthAndRole)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ "bcryptjs");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || "your-secret-key-change-in-production";\n// Hash password\nasync function hashPassword(password) {\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().hash(password, 12);\n}\n// Verify password\nasync function verifyPassword(password, hashedPassword) {\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().compare(password, hashedPassword);\n}\n// Generate JWT token\nfunction generateToken(user) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n        user\n    }, JWT_SECRET, {\n        expiresIn: "7d"\n    });\n}\n// Verify JWT token (string version)\nfunction verifyTokenString(token) {\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        // Handle both old and new token formats\n        if (decoded.user) {\n            return decoded;\n        } else if (decoded.userId) {\n            // Convert old format to new format\n            return {\n                user: {\n                    id: decoded.userId,\n                    email: decoded.email || "",\n                    name: decoded.name || "",\n                    role: decoded.role || "CUSTOMER"\n                },\n                iat: decoded.iat,\n                exp: decoded.exp\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error("Token verification error:", error);\n        return null;\n    }\n}\n// Get user from token\nasync function getUserFromToken(token) {\n    const decoded = verifyTokenString(token);\n    if (!decoded) return null;\n    try {\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: decoded.user.id\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error("Error fetching user from token:", error);\n        return null;\n    }\n}\n// Enhanced verifyToken function for API requests\nasync function verifyToken(req) {\n    try {\n        // Try to get token from Authorization header first, then from cookies\n        let token = req.headers.authorization?.replace("Bearer ", "");\n        if (!token && req.cookies.token) {\n            token = req.cookies.token;\n        }\n        if (!token) {\n            return null;\n        }\n        // Verify and decode token\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        let userId;\n        // Handle both token formats\n        if (decoded.user?.id) {\n            userId = decoded.user.id;\n        } else if (decoded.userId) {\n            userId = decoded.userId;\n        } else {\n            return null;\n        }\n        // Fetch fresh user data from database\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: userId\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error("Token verification error:", error);\n        return null;\n    }\n}\n// Middleware to protect API routes\nfunction withAuth(handler) {\n    return async (req, res)=>{\n        try {\n            // Try to get token from Authorization header first, then from cookies\n            let token = req.headers.authorization?.replace("Bearer ", "");\n            if (!token && req.cookies.token) {\n                token = req.cookies.token;\n            }\n            console.log("Auth middleware - Token present:", !!token);\n            console.log("Auth middleware - Headers:", req.headers.authorization ? "Authorization header present" : "No authorization header");\n            console.log("Auth middleware - Cookies:", req.cookies.token ? "Token cookie present" : "No token cookie");\n            if (!token) {\n                console.log("Auth middleware - No token provided");\n                return res.status(401).json({\n                    error: "No token provided"\n                });\n            }\n            const user = await getUserFromToken(token);\n            if (!user) {\n                console.log("Auth middleware - Invalid token");\n                return res.status(401).json({\n                    error: "Invalid token"\n                });\n            }\n            console.log("Auth middleware - User authenticated:", user.email, user.role);\n            return handler(req, res, user);\n        } catch (error) {\n            console.error("Auth middleware error:", error);\n            return res.status(500).json({\n                error: "Authentication error"\n            });\n        }\n    };\n}\n// Middleware to protect API routes with role check\nfunction withAuthAndRole(roles, handler) {\n    return withAuth(async (req, res, user)=>{\n        if (!roles.includes(user.role)) {\n            return res.status(403).json({\n                error: "Insufficient permissions"\n            });\n        }\n        return handler(req, res, user);\n    });\n}\n// Get user from request (for pages)\nasync function getUserFromRequest(req) {\n    const token = req.headers.authorization?.replace("Bearer ", "") || req.cookies.token;\n    if (!token) return null;\n    return getUserFromToken(token);\n}\n// Verify auth for API routes with proper result format\nasync function verifyAuth(req) {\n    try {\n        const user = await verifyToken(req);\n        if (user) {\n            return {\n                success: true,\n                user\n            };\n        } else {\n            return {\n                success: false,\n                error: "Authentication failed"\n            };\n        }\n    } catch (error) {\n        console.error("Auth verification error:", error);\n        return {\n            success: false,\n            error: "Authentication error"\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dC1wYWdlcy1jaGFrcmEvLi9zcmMvbGliL2F1dGgudHM/NjY5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XHJcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJ0AvbGliL3ByaXNtYSc7XHJcbmltcG9ydCB7IFVzZXJSb2xlIH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xyXG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XHJcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0anMnO1xyXG5cclxuY29uc3QgSldUX1NFQ1JFVCA9IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ3lvdXItc2VjcmV0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhVc2VyIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHJvbGU6IFVzZXJSb2xlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhUb2tlbiB7XHJcbiAgdXNlcjogQXV0aFVzZXI7XHJcbiAgaWF0OiBudW1iZXI7XHJcbiAgZXhwOiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIEhhc2ggcGFzc3dvcmRcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhc2hQYXNzd29yZChwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICByZXR1cm4gYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEyKTtcclxufVxyXG5cclxuLy8gVmVyaWZ5IHBhc3N3b3JkXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlQYXNzd29yZChwYXNzd29yZDogc3RyaW5nLCBoYXNoZWRQYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgcmV0dXJuIGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCBoYXNoZWRQYXNzd29yZCk7XHJcbn1cclxuXHJcbi8vIEdlbmVyYXRlIEpXVCB0b2tlblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUb2tlbih1c2VyOiBBdXRoVXNlcik6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGp3dC5zaWduKFxyXG4gICAgeyB1c2VyIH0sXHJcbiAgICBKV1RfU0VDUkVULFxyXG4gICAgeyBleHBpcmVzSW46ICc3ZCcgfVxyXG4gICk7XHJcbn1cclxuXHJcbi8vIFZlcmlmeSBKV1QgdG9rZW4gKHN0cmluZyB2ZXJzaW9uKVxyXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5VG9rZW5TdHJpbmcodG9rZW46IHN0cmluZyk6IEF1dGhUb2tlbiB8IG51bGwge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBkZWNvZGVkID0gand0LnZlcmlmeSh0b2tlbiwgSldUX1NFQ1JFVCkgYXMgYW55O1xyXG4gICAgXHJcbiAgICAvLyBIYW5kbGUgYm90aCBvbGQgYW5kIG5ldyB0b2tlbiBmb3JtYXRzXHJcbiAgICBpZiAoZGVjb2RlZC51c2VyKSB7XHJcbiAgICAgIHJldHVybiBkZWNvZGVkIGFzIEF1dGhUb2tlbjtcclxuICAgIH0gZWxzZSBpZiAoZGVjb2RlZC51c2VySWQpIHtcclxuICAgICAgLy8gQ29udmVydCBvbGQgZm9ybWF0IHRvIG5ldyBmb3JtYXRcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICBpZDogZGVjb2RlZC51c2VySWQsXHJcbiAgICAgICAgICBlbWFpbDogZGVjb2RlZC5lbWFpbCB8fCAnJyxcclxuICAgICAgICAgIG5hbWU6IGRlY29kZWQubmFtZSB8fCAnJyxcclxuICAgICAgICAgIHJvbGU6IGRlY29kZWQucm9sZSB8fCAnQ1VTVE9NRVInXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpYXQ6IGRlY29kZWQuaWF0LFxyXG4gICAgICAgIGV4cDogZGVjb2RlZC5leHBcclxuICAgICAgfSBhcyBBdXRoVG9rZW47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdUb2tlbiB2ZXJpZmljYXRpb24gZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBHZXQgdXNlciBmcm9tIHRva2VuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyRnJvbVRva2VuKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPEF1dGhVc2VyIHwgbnVsbD4ge1xyXG4gIGNvbnN0IGRlY29kZWQgPSB2ZXJpZnlUb2tlblN0cmluZyh0b2tlbik7XHJcbiAgaWYgKCFkZWNvZGVkKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcclxuICAgICAgd2hlcmU6IHsgaWQ6IGRlY29kZWQudXNlci5pZCB9LFxyXG4gICAgICBzZWxlY3Q6IHtcclxuICAgICAgICBpZDogdHJ1ZSxcclxuICAgICAgICBlbWFpbDogdHJ1ZSxcclxuICAgICAgICBuYW1lOiB0cnVlLFxyXG4gICAgICAgIHJvbGU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdXNlcjtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBmcm9tIHRva2VuOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLy8gRW5oYW5jZWQgdmVyaWZ5VG9rZW4gZnVuY3Rpb24gZm9yIEFQSSByZXF1ZXN0c1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5VG9rZW4ocmVxOiBOZXh0QXBpUmVxdWVzdCk6IFByb21pc2U8QXV0aFVzZXIgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFRyeSB0byBnZXQgdG9rZW4gZnJvbSBBdXRob3JpemF0aW9uIGhlYWRlciBmaXJzdCwgdGhlbiBmcm9tIGNvb2tpZXNcclxuICAgIGxldCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24/LnJlcGxhY2UoJ0JlYXJlciAnLCAnJyk7XHJcbiAgICBcclxuICAgIGlmICghdG9rZW4gJiYgcmVxLmNvb2tpZXMudG9rZW4pIHtcclxuICAgICAgdG9rZW4gPSByZXEuY29va2llcy50b2tlbjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCF0b2tlbikge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBWZXJpZnkgYW5kIGRlY29kZSB0b2tlblxyXG4gICAgY29uc3QgZGVjb2RlZCA9IGp3dC52ZXJpZnkodG9rZW4sIEpXVF9TRUNSRVQpIGFzIGFueTtcclxuICAgIGxldCB1c2VySWQ6IHN0cmluZztcclxuICAgIFxyXG4gICAgLy8gSGFuZGxlIGJvdGggdG9rZW4gZm9ybWF0c1xyXG4gICAgaWYgKGRlY29kZWQudXNlcj8uaWQpIHtcclxuICAgICAgdXNlcklkID0gZGVjb2RlZC51c2VyLmlkO1xyXG4gICAgfSBlbHNlIGlmIChkZWNvZGVkLnVzZXJJZCkge1xyXG4gICAgICB1c2VySWQgPSBkZWNvZGVkLnVzZXJJZDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZldGNoIGZyZXNoIHVzZXIgZGF0YSBmcm9tIGRhdGFiYXNlXHJcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcclxuICAgICAgc2VsZWN0OiB7XHJcbiAgICAgICAgaWQ6IHRydWUsXHJcbiAgICAgICAgZW1haWw6IHRydWUsXHJcbiAgICAgICAgbmFtZTogdHJ1ZSxcclxuICAgICAgICByb2xlOiB0cnVlLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHVzZXI7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1Rva2VuIHZlcmlmaWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbi8vIE1pZGRsZXdhcmUgdG8gcHJvdGVjdCBBUEkgcm91dGVzXHJcbmV4cG9ydCBmdW5jdGlvbiB3aXRoQXV0aChoYW5kbGVyOiAocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UsIHVzZXI6IEF1dGhVc2VyKSA9PiBQcm9taXNlPHZvaWQ+KSB7XHJcbiAgcmV0dXJuIGFzeW5jIChyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gVHJ5IHRvIGdldCB0b2tlbiBmcm9tIEF1dGhvcml6YXRpb24gaGVhZGVyIGZpcnN0LCB0aGVuIGZyb20gY29va2llc1xyXG4gICAgICBsZXQgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uPy5yZXBsYWNlKCdCZWFyZXIgJywgJycpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCF0b2tlbiAmJiByZXEuY29va2llcy50b2tlbikge1xyXG4gICAgICAgIHRva2VuID0gcmVxLmNvb2tpZXMudG9rZW47XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKCdBdXRoIG1pZGRsZXdhcmUgLSBUb2tlbiBwcmVzZW50OicsICEhdG9rZW4pO1xyXG4gICAgICBjb25zb2xlLmxvZygnQXV0aCBtaWRkbGV3YXJlIC0gSGVhZGVyczonLCByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uID8gJ0F1dGhvcml6YXRpb24gaGVhZGVyIHByZXNlbnQnIDogJ05vIGF1dGhvcml6YXRpb24gaGVhZGVyJyk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdBdXRoIG1pZGRsZXdhcmUgLSBDb29raWVzOicsIHJlcS5jb29raWVzLnRva2VuID8gJ1Rva2VuIGNvb2tpZSBwcmVzZW50JyA6ICdObyB0b2tlbiBjb29raWUnKTtcclxuICAgICAgXHJcbiAgICAgIGlmICghdG9rZW4pIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnQXV0aCBtaWRkbGV3YXJlIC0gTm8gdG9rZW4gcHJvdmlkZWQnKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ05vIHRva2VuIHByb3ZpZGVkJyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGdldFVzZXJGcm9tVG9rZW4odG9rZW4pO1xyXG4gICAgICBcclxuICAgICAgaWYgKCF1c2VyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0F1dGggbWlkZGxld2FyZSAtIEludmFsaWQgdG9rZW4nKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBlcnJvcjogJ0ludmFsaWQgdG9rZW4nIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnQXV0aCBtaWRkbGV3YXJlIC0gVXNlciBhdXRoZW50aWNhdGVkOicsIHVzZXIuZW1haWwsIHVzZXIucm9sZSk7XHJcbiAgICAgIHJldHVybiBoYW5kbGVyKHJlcSwgcmVzLCB1c2VyKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGggbWlkZGxld2FyZSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnQXV0aGVudGljYXRpb24gZXJyb3InIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuXHJcbi8vIE1pZGRsZXdhcmUgdG8gcHJvdGVjdCBBUEkgcm91dGVzIHdpdGggcm9sZSBjaGVja1xyXG5leHBvcnQgZnVuY3Rpb24gd2l0aEF1dGhBbmRSb2xlKHJvbGVzOiBVc2VyUm9sZVtdLCBoYW5kbGVyOiAocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UsIHVzZXI6IEF1dGhVc2VyKSA9PiBQcm9taXNlPHZvaWQ+KSB7XHJcbiAgcmV0dXJuIHdpdGhBdXRoKGFzeW5jIChyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSwgdXNlcjogQXV0aFVzZXIpID0+IHtcclxuICAgIGlmICghcm9sZXMuaW5jbHVkZXModXNlci5yb2xlKSkge1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBlcnJvcjogJ0luc3VmZmljaWVudCBwZXJtaXNzaW9ucycgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBoYW5kbGVyKHJlcSwgcmVzLCB1c2VyKTtcclxuICB9KTtcclxufVxyXG5cclxuLy8gR2V0IHVzZXIgZnJvbSByZXF1ZXN0IChmb3IgcGFnZXMpXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyRnJvbVJlcXVlc3QocmVxOiBOZXh0QXBpUmVxdWVzdCk6IFByb21pc2U8QXV0aFVzZXIgfCBudWxsPiB7XHJcbiAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uPy5yZXBsYWNlKCdCZWFyZXIgJywgJycpIHx8IFxyXG4gICAgICAgICAgICAgICAgcmVxLmNvb2tpZXMudG9rZW47XHJcbiAgXHJcbiAgaWYgKCF0b2tlbikgcmV0dXJuIG51bGw7XHJcbiAgXHJcbiAgcmV0dXJuIGdldFVzZXJGcm9tVG9rZW4odG9rZW4pO1xyXG59XHJcblxyXG4vLyBWZXJpZnkgYXV0aCBmb3IgQVBJIHJvdXRlcyB3aXRoIHByb3BlciByZXN1bHQgZm9ybWF0XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlBdXRoKHJlcTogTmV4dEFwaVJlcXVlc3QpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgdXNlcj86IEF1dGhVc2VyOyBlcnJvcj86IHN0cmluZyB9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB2ZXJpZnlUb2tlbihyZXEpO1xyXG4gICAgaWYgKHVzZXIpIHtcclxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgdXNlciB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnQXV0aGVudGljYXRpb24gZmFpbGVkJyB9O1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdBdXRoIHZlcmlmaWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdBdXRoZW50aWNhdGlvbiBlcnJvcicgfTtcclxuICB9XHJcbn0iXSwibmFtZXMiOlsicHJpc21hIiwiand0IiwiYmNyeXB0IiwiSldUX1NFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJoYXNoUGFzc3dvcmQiLCJwYXNzd29yZCIsImhhc2giLCJ2ZXJpZnlQYXNzd29yZCIsImhhc2hlZFBhc3N3b3JkIiwiY29tcGFyZSIsImdlbmVyYXRlVG9rZW4iLCJ1c2VyIiwic2lnbiIsImV4cGlyZXNJbiIsInZlcmlmeVRva2VuU3RyaW5nIiwidG9rZW4iLCJkZWNvZGVkIiwidmVyaWZ5IiwidXNlcklkIiwiaWQiLCJlbWFpbCIsIm5hbWUiLCJyb2xlIiwiaWF0IiwiZXhwIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0VXNlckZyb21Ub2tlbiIsImZpbmRVbmlxdWUiLCJ3aGVyZSIsInNlbGVjdCIsInZlcmlmeVRva2VuIiwicmVxIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJyZXBsYWNlIiwiY29va2llcyIsIndpdGhBdXRoIiwiaGFuZGxlciIsInJlcyIsImxvZyIsInN0YXR1cyIsImpzb24iLCJ3aXRoQXV0aEFuZFJvbGUiLCJyb2xlcyIsImluY2x1ZGVzIiwiZ2V0VXNlckZyb21SZXF1ZXN0IiwidmVyaWZ5QXV0aCIsInN1Y2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/lib/auth.ts\n')},"(api)/./src/lib/prisma.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/edge */ "@prisma/client/edge");\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/extension-accelerate */ "@prisma/extension-accelerate");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__]);\n_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__.PrismaClient().$extends((0,_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__.withAccelerate)());\nif (true) globalForPrisma.prisma = prisma;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtEO0FBQ1c7QUFFN0QsTUFBTUUsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSiw2REFBWUEsR0FBR0ssUUFBUSxDQUFDSiw0RUFBY0EsSUFBRztBQUU3RixJQUFJSyxJQUF5QixFQUFjSixnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8uL3NyYy9saWIvcHJpc21hLnRzPzAxZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQvZWRnZSdcclxuaW1wb3J0IHsgd2l0aEFjY2VsZXJhdGUgfSBmcm9tICdAcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlJ1xyXG5cclxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcclxuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCkuJGV4dGVuZHMod2l0aEFjY2VsZXJhdGUoKSlcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsIndpdGhBY2NlbGVyYXRlIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsIiRleHRlbmRzIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/prisma.ts\n')},"(api)/./src/pages/api/parts.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/auth */ "(api)/./src/lib/auth.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__, _lib_auth__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__, _lib_auth__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nasync function handler(req, res) {\n    try {\n        const user = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_1__.verifyToken)(req);\n        if (!user) {\n            return res.status(401).json({\n                error: "Unauthorized"\n            });\n        }\n        if (req.method === "GET") {\n            const brandId = req.query.brandId;\n            // If brandId is provided and user is BRAND, filter by brandId\n            // If user is BRAND but no brandId provided, use user.id\n            // For other roles, return all parts they have access to\n            let whereClause = {};\n            if (user.role === "BRAND") {\n                whereClause.brandId = brandId || user.id;\n            } else if (user.role === "SUPER_ADMIN") {\n                // Super admin can see all parts\n                if (brandId) {\n                    whereClause.brandId = brandId;\n                }\n            } else {\n                // For other roles, implement appropriate access control\n                whereClause.isActive = true;\n            }\n            const parts = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.findMany({\n                where: whereClause,\n                orderBy: {\n                    createdAt: "desc"\n                },\n                include: {\n                    brand: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    }\n                }\n            });\n            return res.status(200).json({\n                success: true,\n                data: parts\n            });\n        }\n        if (req.method === "POST") {\n            if (user.role !== "BRAND" && user.role !== "SUPER_ADMIN") {\n                return res.status(403).json({\n                    error: "Access denied. Brand role required."\n                });\n            }\n            const { brandId, code, name, description, partNumber, category, subCategory, price, costPrice, weight, length, breadth, height, minStockLevel, maxStockLevel, reorderPoint, reorderQty, warranty, specifications, tags, featured, isActive, // Media fields\n            imageUrl, imageUrls, diyVideoUrl, installationVideos, technicalDrawings, // Enhanced AI-optimized fields\n            problemKeywords, symptoms, compatibleAppliances, installationDifficulty, commonFailureReasons, troubleshootingSteps, relatedParts, urgencyLevel, customerDescription, technicalSpecs, safetyWarnings, maintenanceInterval, lifespan, environmentalConditions, // SEO fields\n            seoTitle, seoDescription } = req.body;\n            // Validate required fields\n            if (!code || !name || price === undefined) {\n                return res.status(400).json({\n                    error: "Missing required fields: code, name, price"\n                });\n            }\n            // Use provided brandId or user.id for BRAND role\n            const finalBrandId = brandId || (user.role === "BRAND" ? user.id : null);\n            if (!finalBrandId) {\n                return res.status(400).json({\n                    error: "Brand ID is required"\n                });\n            }\n            // Check if part code already exists for this brand\n            const existingPart = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.findFirst({\n                where: {\n                    brandId: finalBrandId,\n                    code: code\n                }\n            });\n            if (existingPart) {\n                return res.status(400).json({\n                    error: "Part code already exists for this brand"\n                });\n            }\n            // Combine all specifications into a comprehensive format for AI search\n            const enhancedSpecifications = [\n                specifications,\n                technicalSpecs && `Technical Specs: ${technicalSpecs}`,\n                problemKeywords && `Problem Keywords: ${problemKeywords}`,\n                symptoms && `Symptoms: ${symptoms}`,\n                compatibleAppliances && `Compatible Appliances: ${compatibleAppliances}`,\n                commonFailureReasons && `Failure Reasons: ${commonFailureReasons}`,\n                troubleshootingSteps && `Troubleshooting: ${troubleshootingSteps}`,\n                customerDescription && `Customer Description: ${customerDescription}`,\n                safetyWarnings && `Safety: ${safetyWarnings}`,\n                environmentalConditions && `Environment: ${environmentalConditions}`,\n                relatedParts && `Related Parts: ${relatedParts}`,\n                seasonalDemand && `Seasonal: ${seasonalDemand}`,\n                maintenanceInterval && `Maintenance: ${maintenanceInterval}`,\n                lifespan && `Lifespan: ${lifespan}`,\n                installationDifficulty && `Installation: ${installationDifficulty}`,\n                urgencyLevel && `Urgency: ${urgencyLevel}`\n            ].filter(Boolean).join("\\n\\n");\n            // Enhanced tags for better searchability\n            const enhancedTags = [\n                tags,\n                problemKeywords,\n                compatibleAppliances,\n                category,\n                subCategory\n            ].filter(Boolean).join(", ");\n            const newPart = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.create({\n                data: {\n                    brandId: finalBrandId,\n                    code,\n                    name,\n                    description: description || null,\n                    partNumber: partNumber || null,\n                    category: category || null,\n                    subCategory: subCategory || null,\n                    price: parseFloat(price),\n                    costPrice: costPrice ? parseFloat(costPrice) : null,\n                    weight: weight ? parseFloat(weight) : null,\n                    length: length ? parseFloat(length) : null,\n                    breadth: breadth ? parseFloat(breadth) : null,\n                    height: height ? parseFloat(height) : null,\n                    minStockLevel: parseInt(minStockLevel) || 0,\n                    maxStockLevel: maxStockLevel ? parseInt(maxStockLevel) : null,\n                    reorderPoint: reorderPoint ? parseInt(reorderPoint) : null,\n                    reorderQty: reorderQty ? parseInt(reorderQty) : null,\n                    warranty: warranty ? parseInt(warranty) : null,\n                    specifications: enhancedSpecifications || null,\n                    tags: enhancedTags || null,\n                    featured: featured || false,\n                    isActive: isActive !== undefined ? isActive : true,\n                    status: "published",\n                    // Media fields\n                    imageUrl: imageUrl || null,\n                    imageUrls: imageUrls || null,\n                    diyVideoUrl: diyVideoUrl || null,\n                    installationVideos: installationVideos || null,\n                    technicalDrawings: technicalDrawings || null,\n                    // AI-optimized fields\n                    problemKeywords: problemKeywords || null,\n                    symptoms: symptoms || null,\n                    compatibleAppliances: compatibleAppliances || null,\n                    installationDifficulty: installationDifficulty || null,\n                    commonFailureReasons: commonFailureReasons || null,\n                    troubleshootingSteps: troubleshootingSteps || null,\n                    relatedParts: relatedParts || null,\n                    urgencyLevel: urgencyLevel || null,\n                    customerDescription: customerDescription || null,\n                    technicalSpecs: technicalSpecs || null,\n                    safetyWarnings: safetyWarnings || null,\n                    maintenanceInterval: maintenanceInterval || null,\n                    lifespan: lifespan || null,\n                    environmentalConditions: environmentalConditions || null,\n                    // SEO fields\n                    seoTitle: seoTitle || null,\n                    seoDescription: seoDescription || null,\n                    publishedAt: new Date()\n                },\n                include: {\n                    brand: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    }\n                }\n            });\n            // Create initial inventory record for this part\n            try {\n                await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.brandInventory.create({\n                    data: {\n                        brandId: finalBrandId,\n                        partId: newPart.id,\n                        onHandQuantity: 0,\n                        availableQuantity: 0,\n                        reservedQuantity: 0,\n                        defectiveQuantity: 0,\n                        quarantineQuantity: 0,\n                        inTransitQuantity: 0,\n                        lastUpdated: new Date()\n                    }\n                });\n            } catch (inventoryError) {\n                console.warn("Failed to create initial inventory record:", inventoryError);\n            // Don\'t fail the part creation if inventory creation fails\n            }\n            return res.status(201).json({\n                success: true,\n                data: newPart,\n                message: "Part created successfully"\n            });\n        }\n        if (req.method === "PUT") {\n            if (user.role !== "BRAND" && user.role !== "SUPER_ADMIN") {\n                return res.status(403).json({\n                    error: "Access denied. Brand role required."\n                });\n            }\n            const { id, brandId, code, name, description, partNumber, category, subCategory, price, costPrice, weight, length, breadth, height, minStockLevel, maxStockLevel, reorderPoint, reorderQty, warranty, specifications, tags, featured, isActive, // Media fields\n            imageUrl, imageUrls, diyVideoUrl, installationVideos, technicalDrawings, // Enhanced AI-optimized fields\n            problemKeywords, symptoms, compatibleAppliances, installationDifficulty, commonFailureReasons, troubleshootingSteps, relatedParts, urgencyLevel, customerDescription, technicalSpecs, safetyWarnings, maintenanceInterval, lifespan, environmentalConditions, // SEO fields\n            seoTitle, seoDescription } = req.body;\n            if (!id) {\n                return res.status(400).json({\n                    error: "Part ID is required for update"\n                });\n            }\n            // Validate required fields\n            if (!code || !name || price === undefined) {\n                return res.status(400).json({\n                    error: "Missing required fields: code, name, price"\n                });\n            }\n            // Check if part exists and user has permission to update it\n            const existingPart = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.findUnique({\n                where: {\n                    id\n                }\n            });\n            if (!existingPart) {\n                return res.status(404).json({\n                    error: "Part not found"\n                });\n            }\n            // Check permissions\n            if (user.role === "BRAND" && existingPart.brandId !== user.id) {\n                return res.status(403).json({\n                    error: "Access denied. You can only update your own parts."\n                });\n            }\n            // Check if part code already exists for this brand (excluding current part)\n            const duplicatePart = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.findFirst({\n                where: {\n                    brandId: existingPart.brandId,\n                    code: code,\n                    id: {\n                        not: id\n                    }\n                }\n            });\n            if (duplicatePart) {\n                return res.status(400).json({\n                    error: "Part code already exists for this brand"\n                });\n            }\n            // Combine all specifications into a comprehensive format for AI search\n            const enhancedSpecifications = [\n                specifications,\n                technicalSpecs && `Technical Specs: ${technicalSpecs}`,\n                problemKeywords && `Problem Keywords: ${problemKeywords}`,\n                symptoms && `Symptoms: ${symptoms}`,\n                compatibleAppliances && `Compatible Appliances: ${compatibleAppliances}`,\n                commonFailureReasons && `Failure Reasons: ${commonFailureReasons}`,\n                troubleshootingSteps && `Troubleshooting: ${troubleshootingSteps}`,\n                customerDescription && `Customer Description: ${customerDescription}`,\n                safetyWarnings && `Safety: ${safetyWarnings}`,\n                environmentalConditions && `Environment: ${environmentalConditions}`,\n                relatedParts && `Related Parts: ${relatedParts}`,\n                maintenanceInterval && `Maintenance: ${maintenanceInterval}`,\n                lifespan && `Lifespan: ${lifespan}`,\n                installationDifficulty && `Installation: ${installationDifficulty}`,\n                urgencyLevel && `Urgency: ${urgencyLevel}`\n            ].filter(Boolean).join("\\n\\n");\n            // Enhanced tags for better searchability\n            const enhancedTags = [\n                tags,\n                problemKeywords,\n                compatibleAppliances,\n                category,\n                subCategory\n            ].filter(Boolean).join(", ");\n            const updatedPart = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.update({\n                where: {\n                    id\n                },\n                data: {\n                    code,\n                    name,\n                    description: description || null,\n                    partNumber: partNumber || null,\n                    category: category || null,\n                    subCategory: subCategory || null,\n                    price: parseFloat(price),\n                    costPrice: costPrice ? parseFloat(costPrice) : null,\n                    weight: weight ? parseFloat(weight) : null,\n                    length: length ? parseFloat(length) : null,\n                    breadth: breadth ? parseFloat(breadth) : null,\n                    height: height ? parseFloat(height) : null,\n                    minStockLevel: parseInt(minStockLevel) || 0,\n                    maxStockLevel: maxStockLevel ? parseInt(maxStockLevel) : null,\n                    reorderPoint: reorderPoint ? parseInt(reorderPoint) : null,\n                    reorderQty: reorderQty ? parseInt(reorderQty) : null,\n                    warranty: warranty ? parseInt(warranty) : null,\n                    specifications: enhancedSpecifications || null,\n                    tags: enhancedTags || null,\n                    featured: featured || false,\n                    isActive: isActive !== undefined ? isActive : true,\n                    // Media fields\n                    imageUrl: imageUrl || null,\n                    imageUrls: imageUrls || null,\n                    diyVideoUrl: diyVideoUrl || null,\n                    installationVideos: installationVideos || null,\n                    technicalDrawings: technicalDrawings || null,\n                    // AI-optimized fields\n                    problemKeywords: problemKeywords || null,\n                    symptoms: symptoms || null,\n                    compatibleAppliances: compatibleAppliances || null,\n                    installationDifficulty: installationDifficulty || null,\n                    commonFailureReasons: commonFailureReasons || null,\n                    troubleshootingSteps: troubleshootingSteps || null,\n                    relatedParts: relatedParts || null,\n                    urgencyLevel: urgencyLevel || null,\n                    customerDescription: customerDescription || null,\n                    technicalSpecs: technicalSpecs || null,\n                    safetyWarnings: safetyWarnings || null,\n                    maintenanceInterval: maintenanceInterval || null,\n                    lifespan: lifespan || null,\n                    environmentalConditions: environmentalConditions || null,\n                    // SEO fields\n                    seoTitle: seoTitle || null,\n                    seoDescription: seoDescription || null\n                },\n                include: {\n                    brand: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true\n                        }\n                    }\n                }\n            });\n            return res.status(200).json({\n                success: true,\n                data: updatedPart,\n                message: "Part updated successfully"\n            });\n        }\n        return res.status(405).json({\n            error: "Method not allowed"\n        });\n    } catch (error) {\n        console.error("Parts API error:", error);\n        return res.status(500).json({\n            error: "Internal server error",\n            details: error instanceof Error ? error.message : "Unknown error"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/parts.ts\n')}};var __webpack_require__=require("../../webpack-api-runtime.js");__webpack_require__.C(exports);var __webpack_exec__=c=>__webpack_require__(__webpack_require__.s=c),__webpack_exports__=__webpack_require__.X(0,["vendor-chunks/next"],()=>__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fparts&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cparts.ts&middlewareConfigBase64=e30%3D!"));module.exports=__webpack_exports__})();