"use strict";(()=>{var exports={};exports.id="pages/api/notifications",exports.ids=["pages/api/notifications"],exports.modules={"@prisma/client/edge":c=>{c.exports=require("@prisma/client/edge")},bcryptjs:c=>{c.exports=require("bcryptjs")},jsonwebtoken:c=>{c.exports=require("jsonwebtoken")},"next/dist/compiled/next-server/pages-api.runtime.dev.js":c=>{c.exports=require("next/dist/compiled/next-server/pages-api.runtime.dev.js")},nodemailer:c=>{c.exports=require("nodemailer")},"@prisma/extension-accelerate":c=>{c.exports=import("@prisma/extension-accelerate")},"(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnotifications&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cnotifications.ts&middlewareConfigBase64=e30%3D!":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ "(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ "(api)/./node_modules/next/dist/server/future/route-kind.js");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ "(api)/./node_modules/next/dist/build/templates/helpers.js");\n/* harmony import */ var _src_pages_api_notifications_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\notifications.ts */ "(api)/./src/pages/api/notifications.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_notifications_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_notifications_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_notifications_ts__WEBPACK_IMPORTED_MODULE_3__, "default"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_notifications_ts__WEBPACK_IMPORTED_MODULE_3__, "config");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: "/api/notifications",\n        pathname: "/api/notifications",\n        // The following aren\'t used in production.\n        bundlePath: "",\n        filename: ""\n    },\n    userland: _src_pages_api_notifications_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRm5vdGlmaWNhdGlvbnMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlNUNwYWdlcyU1Q2FwaSU1Q25vdGlmaWNhdGlvbnMudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDZ0U7QUFDaEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDREQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyw0REFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8/MzBmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxub3RpZmljYXRpb25zLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvbm90aWZpY2F0aW9uc1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL25vdGlmaWNhdGlvbnNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnotifications&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cnotifications.ts&middlewareConfigBase64=e30%3D!\n')},"(api)/./src/lib/auth.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   getUserFromRequest: () => (/* binding */ getUserFromRequest),\n/* harmony export */   getUserFromToken: () => (/* binding */ getUserFromToken),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   verifyAuth: () => (/* binding */ verifyAuth),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken),\n/* harmony export */   verifyTokenString: () => (/* binding */ verifyTokenString),\n/* harmony export */   withAuth: () => (/* binding */ withAuth),\n/* harmony export */   withAuthAndRole: () => (/* binding */ withAuthAndRole)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ "bcryptjs");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || "your-secret-key-change-in-production";\n// Hash password\nasync function hashPassword(password) {\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().hash(password, 12);\n}\n// Verify password\nasync function verifyPassword(password, hashedPassword) {\n    return bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().compare(password, hashedPassword);\n}\n// Generate JWT token\nfunction generateToken(user) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n        user\n    }, JWT_SECRET, {\n        expiresIn: "7d"\n    });\n}\n// Verify JWT token (string version)\nfunction verifyTokenString(token) {\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        // Handle both old and new token formats\n        if (decoded.user) {\n            return decoded;\n        } else if (decoded.userId) {\n            // Convert old format to new format\n            return {\n                user: {\n                    id: decoded.userId,\n                    email: decoded.email || "",\n                    name: decoded.name || "",\n                    role: decoded.role || "CUSTOMER"\n                },\n                iat: decoded.iat,\n                exp: decoded.exp\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error("Token verification error:", error);\n        return null;\n    }\n}\n// Get user from token\nasync function getUserFromToken(token) {\n    const decoded = verifyTokenString(token);\n    if (!decoded) return null;\n    try {\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: decoded.user.id\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error("Error fetching user from token:", error);\n        return null;\n    }\n}\n// Enhanced verifyToken function for API requests\nasync function verifyToken(req) {\n    try {\n        // Try to get token from Authorization header first, then from cookies\n        let token = req.headers.authorization?.replace("Bearer ", "");\n        if (!token && req.cookies.token) {\n            token = req.cookies.token;\n        }\n        if (!token) {\n            return null;\n        }\n        // Verify and decode token\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        let userId;\n        // Handle both token formats\n        if (decoded.user?.id) {\n            userId = decoded.user.id;\n        } else if (decoded.userId) {\n            userId = decoded.userId;\n        } else {\n            return null;\n        }\n        // Fetch fresh user data from database\n        const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n            where: {\n                id: userId\n            },\n            select: {\n                id: true,\n                email: true,\n                name: true,\n                role: true\n            }\n        });\n        return user;\n    } catch (error) {\n        console.error("Token verification error:", error);\n        return null;\n    }\n}\n// Middleware to protect API routes\nfunction withAuth(handler) {\n    return async (req, res)=>{\n        try {\n            // Try to get token from Authorization header first, then from cookies\n            let token = req.headers.authorization?.replace("Bearer ", "");\n            if (!token && req.cookies.token) {\n                token = req.cookies.token;\n            }\n            console.log("Auth middleware - Token present:", !!token);\n            console.log("Auth middleware - Headers:", req.headers.authorization ? "Authorization header present" : "No authorization header");\n            console.log("Auth middleware - Cookies:", req.cookies.token ? "Token cookie present" : "No token cookie");\n            if (!token) {\n                console.log("Auth middleware - No token provided");\n                return res.status(401).json({\n                    error: "No token provided"\n                });\n            }\n            const user = await getUserFromToken(token);\n            if (!user) {\n                console.log("Auth middleware - Invalid token");\n                return res.status(401).json({\n                    error: "Invalid token"\n                });\n            }\n            console.log("Auth middleware - User authenticated:", user.email, user.role);\n            return handler(req, res, user);\n        } catch (error) {\n            console.error("Auth middleware error:", error);\n            return res.status(500).json({\n                error: "Authentication error"\n            });\n        }\n    };\n}\n// Middleware to protect API routes with role check\nfunction withAuthAndRole(roles, handler) {\n    return withAuth(async (req, res, user)=>{\n        if (!roles.includes(user.role)) {\n            return res.status(403).json({\n                error: "Insufficient permissions"\n            });\n        }\n        return handler(req, res, user);\n    });\n}\n// Get user from request (for pages)\nasync function getUserFromRequest(req) {\n    const token = req.headers.authorization?.replace("Bearer ", "") || req.cookies.token;\n    if (!token) return null;\n    return getUserFromToken(token);\n}\n// Verify auth for API routes with proper result format\nasync function verifyAuth(req) {\n    try {\n        const user = await verifyToken(req);\n        if (user) {\n            return {\n                success: true,\n                user\n            };\n        } else {\n            return {\n                success: false,\n                error: "Authentication failed"\n            };\n        }\n    } catch (error) {\n        console.error("Auth verification error:", error);\n        return {\n            success: false,\n            error: "Authentication error"\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/auth.ts\n')},"(api)/./src/lib/email.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmailService: () => (/* binding */ EmailService),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nodemailer */ "nodemailer");\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nodemailer__WEBPACK_IMPORTED_MODULE_0__);\n\n// Email service class\nclass EmailService {\n    constructor(){\n        this.transporter = null;\n        this.config = null;\n        this.initializeTransporter();\n    }\n    initializeTransporter() {\n        try {\n            // Check for email configuration in environment variables\n            const emailHost = process.env.EMAIL_HOST || process.env.SMTP_HOST;\n            const emailPort = parseInt(process.env.EMAIL_PORT || process.env.SMTP_PORT || "587");\n            const emailUser = process.env.EMAIL_USER || process.env.SMTP_USER;\n            const emailPass = process.env.EMAIL_PASS || process.env.SMTP_PASS;\n            const emailSecure = process.env.EMAIL_SECURE === "true" || process.env.SMTP_SECURE === "true";\n            if (!emailHost || !emailUser || !emailPass) {\n                console.warn("Email configuration not found. Email notifications will be disabled.");\n                return;\n            }\n            this.config = {\n                host: emailHost,\n                port: emailPort,\n                secure: emailSecure,\n                auth: {\n                    user: emailUser,\n                    pass: emailPass\n                }\n            };\n            this.transporter = nodemailer__WEBPACK_IMPORTED_MODULE_0___default().createTransport({\n                host: this.config.host,\n                port: this.config.port,\n                secure: this.config.secure,\n                auth: this.config.auth,\n                // Add connection timeout settings\n                connectionTimeout: 60000,\n                greetingTimeout: 30000,\n                socketTimeout: 60000,\n                // Enable debug logging in development\n                debug: "development" !== "production",\n                logger: "development" !== "production"\n            });\n            console.log("Email service initialized successfully");\n        } catch (error) {\n            console.error("Failed to initialize email service:", error);\n        }\n    }\n    // Check if email service is available\n    isAvailable() {\n        return this.transporter !== null && this.config !== null;\n    }\n    // Verify email configuration\n    async verifyConnection() {\n        if (!this.transporter) {\n            return false;\n        }\n        try {\n            await this.transporter.verify();\n            console.log("Email service connection verified");\n            return true;\n        } catch (error) {\n            console.error("Email service verification failed:", error);\n            return false;\n        }\n    }\n    // Generate HTML email template\n    generateEmailTemplate(data) {\n        const priorityColors = {\n            urgent: "#dc2626",\n            high: "#ea580c",\n            medium: "#2563eb",\n            low: "#6b7280"\n        };\n        const priorityColor = priorityColors[data.priority] || priorityColors.medium;\n        return `\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>${data.subject}</title>\r\n    <style>\r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, \'Helvetica Neue\', Arial, sans-serif;\r\n            line-height: 1.6;\r\n            color: #333;\r\n            max-width: 600px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            background-color: #f8fafc;\r\n        }\r\n        .email-container {\r\n            background-color: white;\r\n            border-radius: 8px;\r\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n            overflow: hidden;\r\n        }\r\n        .email-header {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n            padding: 30px 20px;\r\n            text-align: center;\r\n        }\r\n        .email-header h1 {\r\n            margin: 0;\r\n            font-size: 24px;\r\n            font-weight: 600;\r\n        }\r\n        .email-header .company-name {\r\n            font-size: 14px;\r\n            opacity: 0.9;\r\n            margin-top: 5px;\r\n        }\r\n        .email-body {\r\n            padding: 30px 20px;\r\n        }\r\n        .priority-badge {\r\n            display: inline-block;\r\n            background-color: ${priorityColor};\r\n            color: white;\r\n            padding: 4px 12px;\r\n            border-radius: 20px;\r\n            font-size: 12px;\r\n            font-weight: 600;\r\n            text-transform: uppercase;\r\n            margin-bottom: 20px;\r\n        }\r\n        .notification-title {\r\n            font-size: 20px;\r\n            font-weight: 600;\r\n            color: #1f2937;\r\n            margin-bottom: 15px;\r\n        }\r\n        .notification-message {\r\n            font-size: 16px;\r\n            color: #4b5563;\r\n            margin-bottom: 25px;\r\n            line-height: 1.7;\r\n        }\r\n        .action-button {\r\n            display: inline-block;\r\n            background-color: #667eea;\r\n            color: white;\r\n            padding: 12px 24px;\r\n            text-decoration: none;\r\n            border-radius: 6px;\r\n            font-weight: 600;\r\n            margin-bottom: 25px;\r\n            transition: background-color 0.3s ease;\r\n        }\r\n        .action-button:hover {\r\n            background-color: #5a67d8;\r\n        }\r\n        .notification-details {\r\n            background-color: #f8fafc;\r\n            border-left: 4px solid ${priorityColor};\r\n            padding: 15px;\r\n            margin: 20px 0;\r\n            border-radius: 0 6px 6px 0;\r\n        }\r\n        .detail-row {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 8px;\r\n            font-size: 14px;\r\n        }\r\n        .detail-label {\r\n            font-weight: 600;\r\n            color: #374151;\r\n        }\r\n        .detail-value {\r\n            color: #6b7280;\r\n        }\r\n        .email-footer {\r\n            background-color: #f8fafc;\r\n            padding: 20px;\r\n            text-align: center;\r\n            border-top: 1px solid #e5e7eb;\r\n        }\r\n        .footer-text {\r\n            font-size: 12px;\r\n            color: #6b7280;\r\n            margin-bottom: 10px;\r\n        }\r\n        .footer-links {\r\n            font-size: 12px;\r\n        }\r\n        .footer-links a {\r\n            color: #667eea;\r\n            text-decoration: none;\r\n            margin: 0 10px;\r\n        }\r\n        .footer-links a:hover {\r\n            text-decoration: underline;\r\n        }\r\n        @media (max-width: 600px) {\r\n            body {\r\n                padding: 10px;\r\n            }\r\n            .email-header, .email-body, .email-footer {\r\n                padding: 20px 15px;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class="email-container">\r\n        <div class="email-header">\r\n            <h1>SpareFlow</h1>\r\n            <div class="company-name">AI Spare Logistics Platform</div>\r\n        </div>\r\n        \r\n        <div class="email-body">\r\n            <div class="priority-badge">${data.priority} Priority</div>\r\n            \r\n            <h2 class="notification-title">${data.title}</h2>\r\n            \r\n            <p class="notification-message">${data.message}</p>\r\n            \r\n            ${data.actionUrl ? `\r\n                <a href="${data.actionUrl}" class="action-button">\r\n                    ${data.actionLabel || "View Details"}\r\n                </a>\r\n            ` : ""}\r\n            \r\n            ${data.data ? `\r\n                <div class="notification-details">\r\n                    <div class="detail-row">\r\n                        <span class="detail-label">Notification Type:</span>\r\n                        <span class="detail-value">${data.type}</span>\r\n                    </div>\r\n                    <div class="detail-row">\r\n                        <span class="detail-label">Timestamp:</span>\r\n                        <span class="detail-value">${new Date().toLocaleString()}</span>\r\n                    </div>\r\n                    ${Object.entries(data.data).map(([key, value])=>`\r\n                        <div class="detail-row">\r\n                            <span class="detail-label">${key.charAt(0).toUpperCase() + key.slice(1)}:</span>\r\n                            <span class="detail-value">${value}</span>\r\n                        </div>\r\n                    `).join("")}\r\n                </div>\r\n            ` : ""}\r\n            \r\n            <p style="font-size: 14px; color: #6b7280; margin-top: 30px;">\r\n                This is an automated notification from SpareFlow. Please do not reply to this email.\r\n            </p>\r\n        </div>\r\n        \r\n        <div class="email-footer">\r\n            <p class="footer-text">\r\n                \xa9 ${new Date().getFullYear()} SpareFlow. All rights reserved.\r\n            </p>\r\n            <div class="footer-links">\r\n                <a href="${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/dashboard">Dashboard</a>\r\n                <a href="${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/help">Help Center</a>\r\n                ${data.unsubscribeUrl ? `<a href="${data.unsubscribeUrl}">Unsubscribe</a>` : ""}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n    `;\n    }\n    // Generate plain text email\n    generatePlainTextEmail(data) {\n        let text = `SpareFlow - ${data.title}\\n\\n`;\n        text += `Priority: ${data.priority.toUpperCase()}\\n\\n`;\n        text += `${data.message}\\n\\n`;\n        if (data.actionUrl) {\n            text += `${data.actionLabel || "View Details"}: ${data.actionUrl}\\n\\n`;\n        }\n        if (data.data) {\n            text += `Details:\\n`;\n            text += `- Type: ${data.type}\\n`;\n            text += `- Timestamp: ${new Date().toLocaleString()}\\n`;\n            Object.entries(data.data).forEach(([key, value])=>{\n                text += `- ${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}\\n`;\n            });\n            text += "\\n";\n        }\n        text += `This is an automated notification from SpareFlow.\\n`;\n        text += `\xa9 ${new Date().getFullYear()} SpareFlow. All rights reserved.\\n`;\n        return text;\n    }\n    // Send email notification\n    async sendNotification(recipientEmail, notification, recipientName, additionalData) {\n        if (!this.transporter || !this.isAvailable()) {\n            console.warn("Email service not available, skipping email notification");\n            return false;\n        }\n        try {\n            const emailData = {\n                recipientName,\n                recipientEmail,\n                subject: `SpareFlow: ${notification.title}`,\n                title: notification.title,\n                message: notification.message,\n                actionUrl: notification.actionUrl,\n                actionLabel: notification.actionLabel,\n                priority: notification.priority,\n                type: notification.type,\n                data: {\n                    ...notification.data,\n                    ...additionalData\n                },\n                companyName: "SpareFlow",\n                supportEmail: process.env.SUPPORT_EMAIL || "support@spareflow.com"\n            };\n            const mailOptions = {\n                from: {\n                    name: "SpareFlow",\n                    address: process.env.EMAIL_FROM || process.env.EMAIL_USER || "noreply@spareflow.com"\n                },\n                to: recipientEmail,\n                subject: emailData.subject,\n                html: this.generateEmailTemplate(emailData),\n                text: this.generatePlainTextEmail(emailData),\n                headers: {\n                    "X-Priority": notification.priority === "urgent" ? "1" : notification.priority === "high" ? "2" : "3",\n                    "X-SpareFlow-Type": notification.type,\n                    "X-SpareFlow-ID": notification.id\n                }\n            };\n            const result = await this.transporter.sendMail(mailOptions);\n            console.log(`Email sent successfully to ${recipientEmail}:`, result.messageId);\n            return true;\n        } catch (error) {\n            console.error(`Failed to send email to ${recipientEmail}:`, error);\n            return false;\n        }\n    }\n    // Send bulk email notifications\n    async sendBulkNotifications(recipients, notification) {\n        const results = [];\n        let success = 0;\n        let failed = 0;\n        for (const recipient of recipients){\n            try {\n                const sent = await this.sendNotification(recipient.email, notification, recipient.name, recipient.data);\n                if (sent) {\n                    success++;\n                    results.push({\n                        email: recipient.email,\n                        success: true\n                    });\n                } else {\n                    failed++;\n                    results.push({\n                        email: recipient.email,\n                        success: false,\n                        error: "Email service unavailable"\n                    });\n                }\n            } catch (error) {\n                failed++;\n                results.push({\n                    email: recipient.email,\n                    success: false,\n                    error: error instanceof Error ? error.message : "Unknown error"\n                });\n            }\n        }\n        console.log(`Bulk email results: ${success} sent, ${failed} failed`);\n        return {\n            success,\n            failed,\n            results\n        };\n    }\n    // Send welcome email\n    async sendWelcomeEmail(recipientEmail, recipientName, userRole, loginUrl) {\n        const notification = {\n            id: `welcome_${Date.now()}`,\n            type: "system",\n            title: `Welcome to SpareFlow!`,\n            message: `Hello ${recipientName}, welcome to SpareFlow! Your ${userRole} account has been created successfully. You can now access your dashboard and start managing your spare parts logistics.`,\n            timestamp: new Date().toISOString(),\n            priority: "medium",\n            actionUrl: loginUrl || `${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/auth/login`,\n            actionLabel: "Access Dashboard",\n            data: {\n                userRole,\n                accountType: userRole\n            }\n        };\n        return this.sendNotification(recipientEmail, notification, recipientName);\n    }\n    // Send password reset email\n    async sendPasswordResetEmail(recipientEmail, recipientName, resetToken, resetUrl) {\n        const finalResetUrl = resetUrl || `${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/auth/reset-password?token=${resetToken}`;\n        const notification = {\n            id: `password_reset_${Date.now()}`,\n            type: "system",\n            title: "Password Reset Request",\n            message: `Hello ${recipientName}, you have requested to reset your password. Click the button below to reset your password. This link will expire in 1 hour for security reasons.`,\n            timestamp: new Date().toISOString(),\n            priority: "high",\n            actionUrl: finalResetUrl,\n            actionLabel: "Reset Password",\n            data: {\n                resetToken,\n                expiresIn: "1 hour"\n            }\n        };\n        return this.sendNotification(recipientEmail, notification, recipientName);\n    }\n    // Send order confirmation email\n    async sendOrderConfirmationEmail(recipientEmail, recipientName, orderData) {\n        const notification = {\n            id: `order_confirmation_${orderData.id}_${Date.now()}`,\n            type: "order",\n            title: "Order Confirmation",\n            message: `Hello ${recipientName}, your order #${orderData.id} has been confirmed. We\'ll notify you once your order is shipped.`,\n            timestamp: new Date().toISOString(),\n            priority: "medium",\n            actionUrl: `${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/dashboard?tab=orders&order=${orderData.id}`,\n            actionLabel: "Track Order",\n            data: {\n                orderId: orderData.id,\n                partName: orderData.partName,\n                quantity: orderData.quantity,\n                totalAmount: orderData.totalAmount,\n                estimatedDelivery: orderData.estimatedDelivery\n            }\n        };\n        return this.sendNotification(recipientEmail, notification, recipientName);\n    }\n    // Send shipment notification email\n    async sendShipmentNotificationEmail(recipientEmail, recipientName, shipmentData) {\n        const notification = {\n            id: `shipment_notification_${shipmentData.id}_${Date.now()}`,\n            type: "shipment",\n            title: "Shipment Update",\n            message: `Hello ${recipientName}, your shipment #${shipmentData.id} status has been updated to ${shipmentData.status}. ${shipmentData.awbNumber ? `Tracking number: ${shipmentData.awbNumber}` : ""}`,\n            timestamp: new Date().toISOString(),\n            priority: shipmentData.status === "DELIVERED" ? "high" : "medium",\n            actionUrl: `${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/dashboard?tab=shipments&shipment=${shipmentData.id}`,\n            actionLabel: "Track Shipment",\n            data: {\n                shipmentId: shipmentData.id,\n                status: shipmentData.status,\n                awbNumber: shipmentData.awbNumber,\n                numBoxes: shipmentData.numBoxes,\n                estimatedDelivery: shipmentData.estimatedDelivery\n            }\n        };\n        return this.sendNotification(recipientEmail, notification, recipientName);\n    }\n    // Send wallet transaction email\n    async sendWalletTransactionEmail(recipientEmail, recipientName, transactionData) {\n        const notification = {\n            id: `wallet_transaction_${transactionData.id}_${Date.now()}`,\n            type: "wallet",\n            title: `Wallet ${transactionData.type === "DEBIT" ? "Debited" : "Credited"}`,\n            message: `Hello ${recipientName}, ₹${transactionData.amount} has been ${transactionData.type === "DEBIT" ? "debited from" : "credited to"} your wallet. Your current balance is ₹${transactionData.balanceAfter}.`,\n            timestamp: new Date().toISOString(),\n            priority: transactionData.type === "DEBIT" ? "medium" : "low",\n            actionUrl: `${process.env.NEXT_PUBLIC_APP_URL || "https://spareflow.com"}/dashboard?tab=wallet`,\n            actionLabel: "View Wallet",\n            data: {\n                transactionId: transactionData.id,\n                type: transactionData.type,\n                amount: transactionData.amount,\n                balanceAfter: transactionData.balanceAfter,\n                reference: transactionData.reference,\n                reason: transactionData.reason\n            }\n        };\n        return this.sendNotification(recipientEmail, notification, recipientName);\n    }\n}\n// Create singleton instance\nconst emailService = new EmailService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (emailService);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxVQUFVLEVBQUVELGdCQUFnQjNFLElBQUksS0FBSyxVQUFVLGlCQUFpQixjQUFjLHVDQUF1QyxFQUFFMkUsZ0JBQWdCRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2xOeEIsV0FBVyxJQUFJcEQsT0FBT3FELFdBQVc7WUFDakM1RCxVQUFVaUYsZ0JBQWdCM0UsSUFBSSxLQUFLLFVBQVUsV0FBVztZQUN4REYsV0FBVyxDQUFDLEVBQUVoRCxRQUFRQyxHQUFHLENBQUM4RCxtQkFBbUIsSUFBSSx3QkFBd0IscUJBQXFCLENBQUM7WUFDL0ZkLGFBQWE7WUFDYlosTUFBTTtnQkFDSjJGLGVBQWVILGdCQUFnQnhDLEVBQUU7Z0JBQ2pDbkMsTUFBTTJFLGdCQUFnQjNFLElBQUk7Z0JBQzFCNEUsUUFBUUQsZ0JBQWdCQyxNQUFNO2dCQUM5QkMsY0FBY0YsZ0JBQWdCRSxZQUFZO2dCQUMxQ0UsV0FBV0osZ0JBQWdCSSxTQUFTO2dCQUNwQ0MsUUFBUUwsZ0JBQWdCSyxNQUFNO1lBQ2hDO1FBQ0Y7UUFFQSxPQUFPLElBQUksQ0FBQzlELGdCQUFnQixDQUFDQyxnQkFBZ0JDLGNBQWNDO0lBQzdEO0FBQ0Y7QUFFQSw0QkFBNEI7QUFDNUIsTUFBTTRELGVBQWUsSUFBSXpJO0FBRXpCLGlFQUFleUksWUFBWUEsRUFBQTtBQUNvQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtcGFnZXMtY2hha3JhLy4vc3JjL2xpYi9lbWFpbC50cz80YzE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInXHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkRhdGEgfSBmcm9tICdAL2xpYi93ZWJzb2NrZXQnXHJcblxyXG4vLyBFbWFpbCBjb25maWd1cmF0aW9uIGludGVyZmFjZVxyXG5pbnRlcmZhY2UgRW1haWxDb25maWcge1xyXG4gIGhvc3Q6IHN0cmluZ1xyXG4gIHBvcnQ6IG51bWJlclxyXG4gIHNlY3VyZTogYm9vbGVhblxyXG4gIGF1dGg6IHtcclxuICAgIHVzZXI6IHN0cmluZ1xyXG4gICAgcGFzczogc3RyaW5nXHJcbiAgfVxyXG59XHJcblxyXG4vLyBFbWFpbCB0ZW1wbGF0ZSBkYXRhIGludGVyZmFjZVxyXG5pbnRlcmZhY2UgRW1haWxUZW1wbGF0ZURhdGEge1xyXG4gIHJlY2lwaWVudE5hbWU/OiBzdHJpbmdcclxuICByZWNpcGllbnRFbWFpbDogc3RyaW5nXHJcbiAgc3ViamVjdDogc3RyaW5nXHJcbiAgdGl0bGU6IHN0cmluZ1xyXG4gIG1lc3NhZ2U6IHN0cmluZ1xyXG4gIGFjdGlvblVybD86IHN0cmluZ1xyXG4gIGFjdGlvbkxhYmVsPzogc3RyaW5nXHJcbiAgcHJpb3JpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAndXJnZW50J1xyXG4gIHR5cGU6IHN0cmluZ1xyXG4gIGRhdGE/OiBhbnlcclxuICBjb21wYW55TmFtZT86IHN0cmluZ1xyXG4gIHN1cHBvcnRFbWFpbD86IHN0cmluZ1xyXG4gIHVuc3Vic2NyaWJlVXJsPzogc3RyaW5nXHJcbn1cclxuXHJcbi8vIEVtYWlsIHNlcnZpY2UgY2xhc3NcclxuY2xhc3MgRW1haWxTZXJ2aWNlIHtcclxuICBwcml2YXRlIHRyYW5zcG9ydGVyOiBub2RlbWFpbGVyLlRyYW5zcG9ydGVyIHwgbnVsbCA9IG51bGxcclxuICBwcml2YXRlIGNvbmZpZzogRW1haWxDb25maWcgfCBudWxsID0gbnVsbFxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZVRyYW5zcG9ydGVyKClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVRyYW5zcG9ydGVyKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ2hlY2sgZm9yIGVtYWlsIGNvbmZpZ3VyYXRpb24gaW4gZW52aXJvbm1lbnQgdmFyaWFibGVzXHJcbiAgICAgIGNvbnN0IGVtYWlsSG9zdCA9IHByb2Nlc3MuZW52LkVNQUlMX0hPU1QgfHwgcHJvY2Vzcy5lbnYuU01UUF9IT1NUXHJcbiAgICAgIGNvbnN0IGVtYWlsUG9ydCA9IHBhcnNlSW50KHByb2Nlc3MuZW52LkVNQUlMX1BPUlQgfHwgcHJvY2Vzcy5lbnYuU01UUF9QT1JUIHx8ICc1ODcnKVxyXG4gICAgICBjb25zdCBlbWFpbFVzZXIgPSBwcm9jZXNzLmVudi5FTUFJTF9VU0VSIHx8IHByb2Nlc3MuZW52LlNNVFBfVVNFUlxyXG4gICAgICBjb25zdCBlbWFpbFBhc3MgPSBwcm9jZXNzLmVudi5FTUFJTF9QQVNTIHx8IHByb2Nlc3MuZW52LlNNVFBfUEFTU1xyXG4gICAgICBjb25zdCBlbWFpbFNlY3VyZSA9IHByb2Nlc3MuZW52LkVNQUlMX1NFQ1VSRSA9PT0gJ3RydWUnIHx8IHByb2Nlc3MuZW52LlNNVFBfU0VDVVJFID09PSAndHJ1ZSdcclxuXHJcbiAgICAgIGlmICghZW1haWxIb3N0IHx8ICFlbWFpbFVzZXIgfHwgIWVtYWlsUGFzcykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignRW1haWwgY29uZmlndXJhdGlvbiBub3QgZm91bmQuIEVtYWlsIG5vdGlmaWNhdGlvbnMgd2lsbCBiZSBkaXNhYmxlZC4nKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLmNvbmZpZyA9IHtcclxuICAgICAgICBob3N0OiBlbWFpbEhvc3QsXHJcbiAgICAgICAgcG9ydDogZW1haWxQb3J0LFxyXG4gICAgICAgIHNlY3VyZTogZW1haWxTZWN1cmUsXHJcbiAgICAgICAgYXV0aDoge1xyXG4gICAgICAgICAgdXNlcjogZW1haWxVc2VyLFxyXG4gICAgICAgICAgcGFzczogZW1haWxQYXNzXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xyXG4gICAgICAgIGhvc3Q6IHRoaXMuY29uZmlnLmhvc3QsXHJcbiAgICAgICAgcG9ydDogdGhpcy5jb25maWcucG9ydCxcclxuICAgICAgICBzZWN1cmU6IHRoaXMuY29uZmlnLnNlY3VyZSxcclxuICAgICAgICBhdXRoOiB0aGlzLmNvbmZpZy5hdXRoLFxyXG4gICAgICAgIC8vIEFkZCBjb25uZWN0aW9uIHRpbWVvdXQgc2V0dGluZ3NcclxuICAgICAgICBjb25uZWN0aW9uVGltZW91dDogNjAwMDAsIC8vIDYwIHNlY29uZHNcclxuICAgICAgICBncmVldGluZ1RpbWVvdXQ6IDMwMDAwLCAgIC8vIDMwIHNlY29uZHNcclxuICAgICAgICBzb2NrZXRUaW1lb3V0OiA2MDAwMCwgICAgIC8vIDYwIHNlY29uZHNcclxuICAgICAgICAvLyBFbmFibGUgZGVidWcgbG9nZ2luZyBpbiBkZXZlbG9wbWVudFxyXG4gICAgICAgIGRlYnVnOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxyXG4gICAgICAgIGxvZ2dlcjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ0VtYWlsIHNlcnZpY2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5JylcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIGVtYWlsIHNlcnZpY2U6JywgZXJyb3IpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBlbWFpbCBzZXJ2aWNlIGlzIGF2YWlsYWJsZVxyXG4gIHB1YmxpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydGVyICE9PSBudWxsICYmIHRoaXMuY29uZmlnICE9PSBudWxsXHJcbiAgfVxyXG5cclxuICAvLyBWZXJpZnkgZW1haWwgY29uZmlndXJhdGlvblxyXG4gIHB1YmxpYyBhc3luYyB2ZXJpZnlDb25uZWN0aW9uKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgaWYgKCF0aGlzLnRyYW5zcG9ydGVyKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IHRoaXMudHJhbnNwb3J0ZXIudmVyaWZ5KClcclxuICAgICAgY29uc29sZS5sb2coJ0VtYWlsIHNlcnZpY2UgY29ubmVjdGlvbiB2ZXJpZmllZCcpXHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFbWFpbCBzZXJ2aWNlIHZlcmlmaWNhdGlvbiBmYWlsZWQ6JywgZXJyb3IpXHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhdGUgSFRNTCBlbWFpbCB0ZW1wbGF0ZVxyXG4gIHByaXZhdGUgZ2VuZXJhdGVFbWFpbFRlbXBsYXRlKGRhdGE6IEVtYWlsVGVtcGxhdGVEYXRhKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHByaW9yaXR5Q29sb3JzID0ge1xyXG4gICAgICB1cmdlbnQ6ICcjZGMyNjI2JyxcclxuICAgICAgaGlnaDogJyNlYTU4MGMnLFxyXG4gICAgICBtZWRpdW06ICcjMjU2M2ViJyxcclxuICAgICAgbG93OiAnIzZiNzI4MCdcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcmlvcml0eUNvbG9yID0gcHJpb3JpdHlDb2xvcnNbZGF0YS5wcmlvcml0eV0gfHwgcHJpb3JpdHlDb2xvcnMubWVkaXVtXHJcblxyXG4gICAgcmV0dXJuIGBcclxuPCFET0NUWVBFIGh0bWw+XHJcbjxodG1sIGxhbmc9XCJlblwiPlxyXG48aGVhZD5cclxuICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiPlxyXG4gICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIj5cclxuICAgIDx0aXRsZT4ke2RhdGEuc3ViamVjdH08L3RpdGxlPlxyXG4gICAgPHN0eWxlPlxyXG4gICAgICAgIGJvZHkge1xyXG4gICAgICAgICAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sICdIZWx2ZXRpY2EgTmV1ZScsIEFyaWFsLCBzYW5zLXNlcmlmO1xyXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS42O1xyXG4gICAgICAgICAgICBjb2xvcjogIzMzMztcclxuICAgICAgICAgICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGZhZmM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5lbWFpbC1jb250YWluZXIge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCA2cHggcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAuZW1haWwtaGVhZGVyIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgIzY2N2VlYSAwJSwgIzc2NGJhMiAxMDAlKTtcclxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAzMHB4IDIwcHg7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmVtYWlsLWhlYWRlciBoMSB7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAuZW1haWwtaGVhZGVyIC5jb21wYW55LW5hbWUge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuOTtcclxuICAgICAgICAgICAgbWFyZ2luLXRvcDogNXB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAuZW1haWwtYm9keSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDMwcHggMjBweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnByaW9yaXR5LWJhZGdlIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3ByaW9yaXR5Q29sb3J9O1xyXG4gICAgICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDRweCAxMnB4O1xyXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAyMHB4O1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5ub3RpZmljYXRpb24tdGl0bGUge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjMWYyOTM3O1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAubm90aWZpY2F0aW9uLW1lc3NhZ2Uge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjNGI1NTYzO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNXB4O1xyXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS43O1xyXG4gICAgICAgIH1cclxuICAgICAgICAuYWN0aW9uLWJ1dHRvbiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzY2N2VlYTtcclxuICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAxMnB4IDI0cHg7XHJcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xyXG4gICAgICAgICAgICBmb250LXdlaWdodDogNjAwO1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyNXB4O1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuM3MgZWFzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmFjdGlvbi1idXR0b246aG92ZXIge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWE2N2Q4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAubm90aWZpY2F0aW9uLWRldGFpbHMge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmYWZjO1xyXG4gICAgICAgICAgICBib3JkZXItbGVmdDogNHB4IHNvbGlkICR7cHJpb3JpdHlDb2xvcn07XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDE1cHg7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMjBweCAwO1xyXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAwIDZweCA2cHggMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmRldGFpbC1yb3cge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDhweDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAuZGV0YWlsLWxhYmVsIHtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgICAgICAgY29sb3I6ICMzNzQxNTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5kZXRhaWwtdmFsdWUge1xyXG4gICAgICAgICAgICBjb2xvcjogIzZiNzI4MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmVtYWlsLWZvb3RlciB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGZhZmM7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlNWU3ZWI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mb290ZXItdGV4dCB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgICAgICAgICAgY29sb3I6ICM2YjcyODA7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mb290ZXItbGlua3Mge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mb290ZXItbGlua3MgYSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjNjY3ZWVhO1xyXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMCAxMHB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAuZm9vdGVyLWxpbmtzIGE6aG92ZXIge1xyXG4gICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XHJcbiAgICAgICAgICAgIGJvZHkge1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAuZW1haWwtaGVhZGVyLCAuZW1haWwtYm9keSwgLmVtYWlsLWZvb3RlciB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDE1cHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICA8L3N0eWxlPlxyXG48L2hlYWQ+XHJcbjxib2R5PlxyXG4gICAgPGRpdiBjbGFzcz1cImVtYWlsLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJlbWFpbC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgPGgxPlNwYXJlRmxvdzwvaDE+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb21wYW55LW5hbWVcIj5BSSBTcGFyZSBMb2dpc3RpY3MgUGxhdGZvcm08L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZW1haWwtYm9keVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpb3JpdHktYmFkZ2VcIj4ke2RhdGEucHJpb3JpdHl9IFByaW9yaXR5PC9kaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8aDIgY2xhc3M9XCJub3RpZmljYXRpb24tdGl0bGVcIj4ke2RhdGEudGl0bGV9PC9oMj5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwibm90aWZpY2F0aW9uLW1lc3NhZ2VcIj4ke2RhdGEubWVzc2FnZX08L3A+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAke2RhdGEuYWN0aW9uVXJsID8gYFxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiR7ZGF0YS5hY3Rpb25Vcmx9XCIgY2xhc3M9XCJhY3Rpb24tYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgJHtkYXRhLmFjdGlvbkxhYmVsIHx8ICdWaWV3IERldGFpbHMnfVxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICBgIDogJyd9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAke2RhdGEuZGF0YSA/IGBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJub3RpZmljYXRpb24tZGV0YWlsc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXRhaWwtcm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLWxhYmVsXCI+Tm90aWZpY2F0aW9uIFR5cGU6PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRldGFpbC12YWx1ZVwiPiR7ZGF0YS50eXBlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRldGFpbC1sYWJlbFwiPlRpbWVzdGFtcDo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGV0YWlsLXZhbHVlXCI+JHtuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCl9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICR7T2JqZWN0LmVudHJpZXMoZGF0YS5kYXRhKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsLXJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZXRhaWwtbGFiZWxcIj4ke2tleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKX06PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkZXRhaWwtdmFsdWVcIj4ke3ZhbHVlfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgYCkuam9pbignJyl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgYCA6ICcnfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgPHAgc3R5bGU9XCJmb250LXNpemU6IDE0cHg7IGNvbG9yOiAjNmI3MjgwOyBtYXJnaW4tdG9wOiAzMHB4O1wiPlxyXG4gICAgICAgICAgICAgICAgVGhpcyBpcyBhbiBhdXRvbWF0ZWQgbm90aWZpY2F0aW9uIGZyb20gU3BhcmVGbG93LiBQbGVhc2UgZG8gbm90IHJlcGx5IHRvIHRoaXMgZW1haWwuXHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZW1haWwtZm9vdGVyXCI+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwiZm9vdGVyLXRleHRcIj5cclxuICAgICAgICAgICAgICAgIMKpICR7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBTcGFyZUZsb3cuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvb3Rlci1saW5rc1wiPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTCB8fCAnaHR0cHM6Ly9zcGFyZWZsb3cuY29tJ30vZGFzaGJvYXJkXCI+RGFzaGJvYXJkPC9hPlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTCB8fCAnaHR0cHM6Ly9zcGFyZWZsb3cuY29tJ30vaGVscFwiPkhlbHAgQ2VudGVyPC9hPlxyXG4gICAgICAgICAgICAgICAgJHtkYXRhLnVuc3Vic2NyaWJlVXJsID8gYDxhIGhyZWY9XCIke2RhdGEudW5zdWJzY3JpYmVVcmx9XCI+VW5zdWJzY3JpYmU8L2E+YCA6ICcnfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L2JvZHk+XHJcbjwvaHRtbD5cclxuICAgIGBcclxuICB9XHJcblxyXG4gIC8vIEdlbmVyYXRlIHBsYWluIHRleHQgZW1haWxcclxuICBwcml2YXRlIGdlbmVyYXRlUGxhaW5UZXh0RW1haWwoZGF0YTogRW1haWxUZW1wbGF0ZURhdGEpOiBzdHJpbmcge1xyXG4gICAgbGV0IHRleHQgPSBgU3BhcmVGbG93IC0gJHtkYXRhLnRpdGxlfVxcblxcbmBcclxuICAgIHRleHQgKz0gYFByaW9yaXR5OiAke2RhdGEucHJpb3JpdHkudG9VcHBlckNhc2UoKX1cXG5cXG5gXHJcbiAgICB0ZXh0ICs9IGAke2RhdGEubWVzc2FnZX1cXG5cXG5gXHJcbiAgICBcclxuICAgIGlmIChkYXRhLmFjdGlvblVybCkge1xyXG4gICAgICB0ZXh0ICs9IGAke2RhdGEuYWN0aW9uTGFiZWwgfHwgJ1ZpZXcgRGV0YWlscyd9OiAke2RhdGEuYWN0aW9uVXJsfVxcblxcbmBcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGRhdGEuZGF0YSkge1xyXG4gICAgICB0ZXh0ICs9IGBEZXRhaWxzOlxcbmBcclxuICAgICAgdGV4dCArPSBgLSBUeXBlOiAke2RhdGEudHlwZX1cXG5gXHJcbiAgICAgIHRleHQgKz0gYC0gVGltZXN0YW1wOiAke25ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKX1cXG5gXHJcbiAgICAgIE9iamVjdC5lbnRyaWVzKGRhdGEuZGF0YSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgdGV4dCArPSBgLSAke2tleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKX06ICR7dmFsdWV9XFxuYFxyXG4gICAgICB9KVxyXG4gICAgICB0ZXh0ICs9ICdcXG4nXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRleHQgKz0gYFRoaXMgaXMgYW4gYXV0b21hdGVkIG5vdGlmaWNhdGlvbiBmcm9tIFNwYXJlRmxvdy5cXG5gXHJcbiAgICB0ZXh0ICs9IGDCqSAke25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKX0gU3BhcmVGbG93LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxcbmBcclxuICAgIFxyXG4gICAgcmV0dXJuIHRleHRcclxuICB9XHJcblxyXG4gIC8vIFNlbmQgZW1haWwgbm90aWZpY2F0aW9uXHJcbiAgcHVibGljIGFzeW5jIHNlbmROb3RpZmljYXRpb24oXHJcbiAgICByZWNpcGllbnRFbWFpbDogc3RyaW5nLFxyXG4gICAgbm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25EYXRhLFxyXG4gICAgcmVjaXBpZW50TmFtZT86IHN0cmluZyxcclxuICAgIGFkZGl0aW9uYWxEYXRhPzogYW55XHJcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBpZiAoIXRoaXMudHJhbnNwb3J0ZXIgfHwgIXRoaXMuaXNBdmFpbGFibGUoKSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0VtYWlsIHNlcnZpY2Ugbm90IGF2YWlsYWJsZSwgc2tpcHBpbmcgZW1haWwgbm90aWZpY2F0aW9uJylcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZW1haWxEYXRhOiBFbWFpbFRlbXBsYXRlRGF0YSA9IHtcclxuICAgICAgICByZWNpcGllbnROYW1lLFxyXG4gICAgICAgIHJlY2lwaWVudEVtYWlsLFxyXG4gICAgICAgIHN1YmplY3Q6IGBTcGFyZUZsb3c6ICR7bm90aWZpY2F0aW9uLnRpdGxlfWAsXHJcbiAgICAgICAgdGl0bGU6IG5vdGlmaWNhdGlvbi50aXRsZSxcclxuICAgICAgICBtZXNzYWdlOiBub3RpZmljYXRpb24ubWVzc2FnZSxcclxuICAgICAgICBhY3Rpb25Vcmw6IG5vdGlmaWNhdGlvbi5hY3Rpb25VcmwsXHJcbiAgICAgICAgYWN0aW9uTGFiZWw6IG5vdGlmaWNhdGlvbi5hY3Rpb25MYWJlbCxcclxuICAgICAgICBwcmlvcml0eTogbm90aWZpY2F0aW9uLnByaW9yaXR5LFxyXG4gICAgICAgIHR5cGU6IG5vdGlmaWNhdGlvbi50eXBlLFxyXG4gICAgICAgIGRhdGE6IHsgLi4ubm90aWZpY2F0aW9uLmRhdGEsIC4uLmFkZGl0aW9uYWxEYXRhIH0sXHJcbiAgICAgICAgY29tcGFueU5hbWU6ICdTcGFyZUZsb3cnLFxyXG4gICAgICAgIHN1cHBvcnRFbWFpbDogcHJvY2Vzcy5lbnYuU1VQUE9SVF9FTUFJTCB8fCAnc3VwcG9ydEBzcGFyZWZsb3cuY29tJ1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBtYWlsT3B0aW9ucyA9IHtcclxuICAgICAgICBmcm9tOiB7XHJcbiAgICAgICAgICBuYW1lOiAnU3BhcmVGbG93JyxcclxuICAgICAgICAgIGFkZHJlc3M6IHByb2Nlc3MuZW52LkVNQUlMX0ZST00gfHwgcHJvY2Vzcy5lbnYuRU1BSUxfVVNFUiB8fCAnbm9yZXBseUBzcGFyZWZsb3cuY29tJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG86IHJlY2lwaWVudEVtYWlsLFxyXG4gICAgICAgIHN1YmplY3Q6IGVtYWlsRGF0YS5zdWJqZWN0LFxyXG4gICAgICAgIGh0bWw6IHRoaXMuZ2VuZXJhdGVFbWFpbFRlbXBsYXRlKGVtYWlsRGF0YSksXHJcbiAgICAgICAgdGV4dDogdGhpcy5nZW5lcmF0ZVBsYWluVGV4dEVtYWlsKGVtYWlsRGF0YSksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgJ1gtUHJpb3JpdHknOiBub3RpZmljYXRpb24ucHJpb3JpdHkgPT09ICd1cmdlbnQnID8gJzEnIDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLnByaW9yaXR5ID09PSAnaGlnaCcgPyAnMicgOiAnMycsXHJcbiAgICAgICAgICAnWC1TcGFyZUZsb3ctVHlwZSc6IG5vdGlmaWNhdGlvbi50eXBlLFxyXG4gICAgICAgICAgJ1gtU3BhcmVGbG93LUlEJzogbm90aWZpY2F0aW9uLmlkXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnNlbmRNYWlsKG1haWxPcHRpb25zKVxyXG4gICAgICBjb25zb2xlLmxvZyhgRW1haWwgc2VudCBzdWNjZXNzZnVsbHkgdG8gJHtyZWNpcGllbnRFbWFpbH06YCwgcmVzdWx0Lm1lc3NhZ2VJZClcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBzZW5kIGVtYWlsIHRvICR7cmVjaXBpZW50RW1haWx9OmAsIGVycm9yKVxyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFNlbmQgYnVsayBlbWFpbCBub3RpZmljYXRpb25zXHJcbiAgcHVibGljIGFzeW5jIHNlbmRCdWxrTm90aWZpY2F0aW9ucyhcclxuICAgIHJlY2lwaWVudHM6IEFycmF5PHsgZW1haWw6IHN0cmluZzsgbmFtZT86IHN0cmluZzsgZGF0YT86IGFueSB9PixcclxuICAgIG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uRGF0YVxyXG4gICk6IFByb21pc2U8eyBzdWNjZXNzOiBudW1iZXI7IGZhaWxlZDogbnVtYmVyOyByZXN1bHRzOiBBcnJheTx7IGVtYWlsOiBzdHJpbmc7IHN1Y2Nlc3M6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0+IH0+IHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBbXVxyXG4gICAgbGV0IHN1Y2Nlc3MgPSAwXHJcbiAgICBsZXQgZmFpbGVkID0gMFxyXG5cclxuICAgIGZvciAoY29uc3QgcmVjaXBpZW50IG9mIHJlY2lwaWVudHMpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzZW50ID0gYXdhaXQgdGhpcy5zZW5kTm90aWZpY2F0aW9uKFxyXG4gICAgICAgICAgcmVjaXBpZW50LmVtYWlsLFxyXG4gICAgICAgICAgbm90aWZpY2F0aW9uLFxyXG4gICAgICAgICAgcmVjaXBpZW50Lm5hbWUsXHJcbiAgICAgICAgICByZWNpcGllbnQuZGF0YVxyXG4gICAgICAgIClcclxuICAgICAgICBcclxuICAgICAgICBpZiAoc2VudCkge1xyXG4gICAgICAgICAgc3VjY2VzcysrXHJcbiAgICAgICAgICByZXN1bHRzLnB1c2goeyBlbWFpbDogcmVjaXBpZW50LmVtYWlsLCBzdWNjZXNzOiB0cnVlIH0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZhaWxlZCsrXHJcbiAgICAgICAgICByZXN1bHRzLnB1c2goeyBlbWFpbDogcmVjaXBpZW50LmVtYWlsLCBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdFbWFpbCBzZXJ2aWNlIHVuYXZhaWxhYmxlJyB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBmYWlsZWQrK1xyXG4gICAgICAgIHJlc3VsdHMucHVzaCh7IFxyXG4gICAgICAgICAgZW1haWw6IHJlY2lwaWVudC5lbWFpbCwgXHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicgXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKGBCdWxrIGVtYWlsIHJlc3VsdHM6ICR7c3VjY2Vzc30gc2VudCwgJHtmYWlsZWR9IGZhaWxlZGApXHJcbiAgICByZXR1cm4geyBzdWNjZXNzLCBmYWlsZWQsIHJlc3VsdHMgfVxyXG4gIH1cclxuXHJcbiAgLy8gU2VuZCB3ZWxjb21lIGVtYWlsXHJcbiAgcHVibGljIGFzeW5jIHNlbmRXZWxjb21lRW1haWwoXHJcbiAgICByZWNpcGllbnRFbWFpbDogc3RyaW5nLFxyXG4gICAgcmVjaXBpZW50TmFtZTogc3RyaW5nLFxyXG4gICAgdXNlclJvbGU6IHN0cmluZyxcclxuICAgIGxvZ2luVXJsPzogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbkRhdGEgPSB7XHJcbiAgICAgIGlkOiBgd2VsY29tZV8ke0RhdGUubm93KCl9YCxcclxuICAgICAgdHlwZTogJ3N5c3RlbScsXHJcbiAgICAgIHRpdGxlOiBgV2VsY29tZSB0byBTcGFyZUZsb3chYCxcclxuICAgICAgbWVzc2FnZTogYEhlbGxvICR7cmVjaXBpZW50TmFtZX0sIHdlbGNvbWUgdG8gU3BhcmVGbG93ISBZb3VyICR7dXNlclJvbGV9IGFjY291bnQgaGFzIGJlZW4gY3JlYXRlZCBzdWNjZXNzZnVsbHkuIFlvdSBjYW4gbm93IGFjY2VzcyB5b3VyIGRhc2hib2FyZCBhbmQgc3RhcnQgbWFuYWdpbmcgeW91ciBzcGFyZSBwYXJ0cyBsb2dpc3RpY3MuYCxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcclxuICAgICAgYWN0aW9uVXJsOiBsb2dpblVybCB8fCBgJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMIHx8ICdodHRwczovL3NwYXJlZmxvdy5jb20nfS9hdXRoL2xvZ2luYCxcclxuICAgICAgYWN0aW9uTGFiZWw6ICdBY2Nlc3MgRGFzaGJvYXJkJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHVzZXJSb2xlLFxyXG4gICAgICAgIGFjY291bnRUeXBlOiB1c2VyUm9sZVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuc2VuZE5vdGlmaWNhdGlvbihyZWNpcGllbnRFbWFpbCwgbm90aWZpY2F0aW9uLCByZWNpcGllbnROYW1lKVxyXG4gIH1cclxuXHJcbiAgLy8gU2VuZCBwYXNzd29yZCByZXNldCBlbWFpbFxyXG4gIHB1YmxpYyBhc3luYyBzZW5kUGFzc3dvcmRSZXNldEVtYWlsKFxyXG4gICAgcmVjaXBpZW50RW1haWw6IHN0cmluZyxcclxuICAgIHJlY2lwaWVudE5hbWU6IHN0cmluZyxcclxuICAgIHJlc2V0VG9rZW46IHN0cmluZyxcclxuICAgIHJlc2V0VXJsPzogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBmaW5hbFJlc2V0VXJsID0gcmVzZXRVcmwgfHwgYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTCB8fCAnaHR0cHM6Ly9zcGFyZWZsb3cuY29tJ30vYXV0aC9yZXNldC1wYXNzd29yZD90b2tlbj0ke3Jlc2V0VG9rZW59YFxyXG4gICAgXHJcbiAgICBjb25zdCBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbkRhdGEgPSB7XHJcbiAgICAgIGlkOiBgcGFzc3dvcmRfcmVzZXRfJHtEYXRlLm5vdygpfWAsXHJcbiAgICAgIHR5cGU6ICdzeXN0ZW0nLFxyXG4gICAgICB0aXRsZTogJ1Bhc3N3b3JkIFJlc2V0IFJlcXVlc3QnLFxyXG4gICAgICBtZXNzYWdlOiBgSGVsbG8gJHtyZWNpcGllbnROYW1lfSwgeW91IGhhdmUgcmVxdWVzdGVkIHRvIHJlc2V0IHlvdXIgcGFzc3dvcmQuIENsaWNrIHRoZSBidXR0b24gYmVsb3cgdG8gcmVzZXQgeW91ciBwYXNzd29yZC4gVGhpcyBsaW5rIHdpbGwgZXhwaXJlIGluIDEgaG91ciBmb3Igc2VjdXJpdHkgcmVhc29ucy5gLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgcHJpb3JpdHk6ICdoaWdoJyxcclxuICAgICAgYWN0aW9uVXJsOiBmaW5hbFJlc2V0VXJsLFxyXG4gICAgICBhY3Rpb25MYWJlbDogJ1Jlc2V0IFBhc3N3b3JkJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHJlc2V0VG9rZW4sXHJcbiAgICAgICAgZXhwaXJlc0luOiAnMSBob3VyJ1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuc2VuZE5vdGlmaWNhdGlvbihyZWNpcGllbnRFbWFpbCwgbm90aWZpY2F0aW9uLCByZWNpcGllbnROYW1lKVxyXG4gIH1cclxuXHJcbiAgLy8gU2VuZCBvcmRlciBjb25maXJtYXRpb24gZW1haWxcclxuICBwdWJsaWMgYXN5bmMgc2VuZE9yZGVyQ29uZmlybWF0aW9uRW1haWwoXHJcbiAgICByZWNpcGllbnRFbWFpbDogc3RyaW5nLFxyXG4gICAgcmVjaXBpZW50TmFtZTogc3RyaW5nLFxyXG4gICAgb3JkZXJEYXRhOiBhbnlcclxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uRGF0YSA9IHtcclxuICAgICAgaWQ6IGBvcmRlcl9jb25maXJtYXRpb25fJHtvcmRlckRhdGEuaWR9XyR7RGF0ZS5ub3coKX1gLFxyXG4gICAgICB0eXBlOiAnb3JkZXInLFxyXG4gICAgICB0aXRsZTogJ09yZGVyIENvbmZpcm1hdGlvbicsXHJcbiAgICAgIG1lc3NhZ2U6IGBIZWxsbyAke3JlY2lwaWVudE5hbWV9LCB5b3VyIG9yZGVyICMke29yZGVyRGF0YS5pZH0gaGFzIGJlZW4gY29uZmlybWVkLiBXZSdsbCBub3RpZnkgeW91IG9uY2UgeW91ciBvcmRlciBpcyBzaGlwcGVkLmAsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICBwcmlvcml0eTogJ21lZGl1bScsXHJcbiAgICAgIGFjdGlvblVybDogYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTCB8fCAnaHR0cHM6Ly9zcGFyZWZsb3cuY29tJ30vZGFzaGJvYXJkP3RhYj1vcmRlcnMmb3JkZXI9JHtvcmRlckRhdGEuaWR9YCxcclxuICAgICAgYWN0aW9uTGFiZWw6ICdUcmFjayBPcmRlcicsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBvcmRlcklkOiBvcmRlckRhdGEuaWQsXHJcbiAgICAgICAgcGFydE5hbWU6IG9yZGVyRGF0YS5wYXJ0TmFtZSxcclxuICAgICAgICBxdWFudGl0eTogb3JkZXJEYXRhLnF1YW50aXR5LFxyXG4gICAgICAgIHRvdGFsQW1vdW50OiBvcmRlckRhdGEudG90YWxBbW91bnQsXHJcbiAgICAgICAgZXN0aW1hdGVkRGVsaXZlcnk6IG9yZGVyRGF0YS5lc3RpbWF0ZWREZWxpdmVyeVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuc2VuZE5vdGlmaWNhdGlvbihyZWNpcGllbnRFbWFpbCwgbm90aWZpY2F0aW9uLCByZWNpcGllbnROYW1lKVxyXG4gIH1cclxuXHJcbiAgLy8gU2VuZCBzaGlwbWVudCBub3RpZmljYXRpb24gZW1haWxcclxuICBwdWJsaWMgYXN5bmMgc2VuZFNoaXBtZW50Tm90aWZpY2F0aW9uRW1haWwoXHJcbiAgICByZWNpcGllbnRFbWFpbDogc3RyaW5nLFxyXG4gICAgcmVjaXBpZW50TmFtZTogc3RyaW5nLFxyXG4gICAgc2hpcG1lbnREYXRhOiBhbnlcclxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uRGF0YSA9IHtcclxuICAgICAgaWQ6IGBzaGlwbWVudF9ub3RpZmljYXRpb25fJHtzaGlwbWVudERhdGEuaWR9XyR7RGF0ZS5ub3coKX1gLFxyXG4gICAgICB0eXBlOiAnc2hpcG1lbnQnLFxyXG4gICAgICB0aXRsZTogJ1NoaXBtZW50IFVwZGF0ZScsXHJcbiAgICAgIG1lc3NhZ2U6IGBIZWxsbyAke3JlY2lwaWVudE5hbWV9LCB5b3VyIHNoaXBtZW50ICMke3NoaXBtZW50RGF0YS5pZH0gc3RhdHVzIGhhcyBiZWVuIHVwZGF0ZWQgdG8gJHtzaGlwbWVudERhdGEuc3RhdHVzfS4gJHtzaGlwbWVudERhdGEuYXdiTnVtYmVyID8gYFRyYWNraW5nIG51bWJlcjogJHtzaGlwbWVudERhdGEuYXdiTnVtYmVyfWAgOiAnJ31gLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgcHJpb3JpdHk6IHNoaXBtZW50RGF0YS5zdGF0dXMgPT09ICdERUxJVkVSRUQnID8gJ2hpZ2gnIDogJ21lZGl1bScsXHJcbiAgICAgIGFjdGlvblVybDogYCR7cHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX1VSTCB8fCAnaHR0cHM6Ly9zcGFyZWZsb3cuY29tJ30vZGFzaGJvYXJkP3RhYj1zaGlwbWVudHMmc2hpcG1lbnQ9JHtzaGlwbWVudERhdGEuaWR9YCxcclxuICAgICAgYWN0aW9uTGFiZWw6ICdUcmFjayBTaGlwbWVudCcsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBzaGlwbWVudElkOiBzaGlwbWVudERhdGEuaWQsXHJcbiAgICAgICAgc3RhdHVzOiBzaGlwbWVudERhdGEuc3RhdHVzLFxyXG4gICAgICAgIGF3Yk51bWJlcjogc2hpcG1lbnREYXRhLmF3Yk51bWJlcixcclxuICAgICAgICBudW1Cb3hlczogc2hpcG1lbnREYXRhLm51bUJveGVzLFxyXG4gICAgICAgIGVzdGltYXRlZERlbGl2ZXJ5OiBzaGlwbWVudERhdGEuZXN0aW1hdGVkRGVsaXZlcnlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnNlbmROb3RpZmljYXRpb24ocmVjaXBpZW50RW1haWwsIG5vdGlmaWNhdGlvbiwgcmVjaXBpZW50TmFtZSlcclxuICB9XHJcblxyXG4gIC8vIFNlbmQgd2FsbGV0IHRyYW5zYWN0aW9uIGVtYWlsXHJcbiAgcHVibGljIGFzeW5jIHNlbmRXYWxsZXRUcmFuc2FjdGlvbkVtYWlsKFxyXG4gICAgcmVjaXBpZW50RW1haWw6IHN0cmluZyxcclxuICAgIHJlY2lwaWVudE5hbWU6IHN0cmluZyxcclxuICAgIHRyYW5zYWN0aW9uRGF0YTogYW55XHJcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBub3RpZmljYXRpb246IE5vdGlmaWNhdGlvbkRhdGEgPSB7XHJcbiAgICAgIGlkOiBgd2FsbGV0X3RyYW5zYWN0aW9uXyR7dHJhbnNhY3Rpb25EYXRhLmlkfV8ke0RhdGUubm93KCl9YCxcclxuICAgICAgdHlwZTogJ3dhbGxldCcsXHJcbiAgICAgIHRpdGxlOiBgV2FsbGV0ICR7dHJhbnNhY3Rpb25EYXRhLnR5cGUgPT09ICdERUJJVCcgPyAnRGViaXRlZCcgOiAnQ3JlZGl0ZWQnfWAsXHJcbiAgICAgIG1lc3NhZ2U6IGBIZWxsbyAke3JlY2lwaWVudE5hbWV9LCDigrkke3RyYW5zYWN0aW9uRGF0YS5hbW91bnR9IGhhcyBiZWVuICR7dHJhbnNhY3Rpb25EYXRhLnR5cGUgPT09ICdERUJJVCcgPyAnZGViaXRlZCBmcm9tJyA6ICdjcmVkaXRlZCB0byd9IHlvdXIgd2FsbGV0LiBZb3VyIGN1cnJlbnQgYmFsYW5jZSBpcyDigrkke3RyYW5zYWN0aW9uRGF0YS5iYWxhbmNlQWZ0ZXJ9LmAsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICBwcmlvcml0eTogdHJhbnNhY3Rpb25EYXRhLnR5cGUgPT09ICdERUJJVCcgPyAnbWVkaXVtJyA6ICdsb3cnLFxyXG4gICAgICBhY3Rpb25Vcmw6IGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkwgfHwgJ2h0dHBzOi8vc3BhcmVmbG93LmNvbSd9L2Rhc2hib2FyZD90YWI9d2FsbGV0YCxcclxuICAgICAgYWN0aW9uTGFiZWw6ICdWaWV3IFdhbGxldCcsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICB0cmFuc2FjdGlvbklkOiB0cmFuc2FjdGlvbkRhdGEuaWQsXHJcbiAgICAgICAgdHlwZTogdHJhbnNhY3Rpb25EYXRhLnR5cGUsXHJcbiAgICAgICAgYW1vdW50OiB0cmFuc2FjdGlvbkRhdGEuYW1vdW50LFxyXG4gICAgICAgIGJhbGFuY2VBZnRlcjogdHJhbnNhY3Rpb25EYXRhLmJhbGFuY2VBZnRlcixcclxuICAgICAgICByZWZlcmVuY2U6IHRyYW5zYWN0aW9uRGF0YS5yZWZlcmVuY2UsXHJcbiAgICAgICAgcmVhc29uOiB0cmFuc2FjdGlvbkRhdGEucmVhc29uXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5zZW5kTm90aWZpY2F0aW9uKHJlY2lwaWVudEVtYWlsLCBub3RpZmljYXRpb24sIHJlY2lwaWVudE5hbWUpXHJcbiAgfVxyXG59XHJcblxyXG4vLyBDcmVhdGUgc2luZ2xldG9uIGluc3RhbmNlXHJcbmNvbnN0IGVtYWlsU2VydmljZSA9IG5ldyBFbWFpbFNlcnZpY2UoKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZW1haWxTZXJ2aWNlXHJcbmV4cG9ydCB7IEVtYWlsU2VydmljZSwgdHlwZSBFbWFpbFRlbXBsYXRlRGF0YSB9Il0sIm5hbWVzIjpbIm5vZGVtYWlsZXIiLCJFbWFpbFNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsInRyYW5zcG9ydGVyIiwiY29uZmlnIiwiaW5pdGlhbGl6ZVRyYW5zcG9ydGVyIiwiZW1haWxIb3N0IiwicHJvY2VzcyIsImVudiIsIkVNQUlMX0hPU1QiLCJTTVRQX0hPU1QiLCJlbWFpbFBvcnQiLCJwYXJzZUludCIsIkVNQUlMX1BPUlQiLCJTTVRQX1BPUlQiLCJlbWFpbFVzZXIiLCJFTUFJTF9VU0VSIiwiU01UUF9VU0VSIiwiZW1haWxQYXNzIiwiRU1BSUxfUEFTUyIsIlNNVFBfUEFTUyIsImVtYWlsU2VjdXJlIiwiRU1BSUxfU0VDVVJFIiwiU01UUF9TRUNVUkUiLCJjb25zb2xlIiwid2FybiIsImhvc3QiLCJwb3J0Iiwic2VjdXJlIiwiYXV0aCIsInVzZXIiLCJwYXNzIiwiY3JlYXRlVHJhbnNwb3J0IiwiY29ubmVjdGlvblRpbWVvdXQiLCJncmVldGluZ1RpbWVvdXQiLCJzb2NrZXRUaW1lb3V0IiwiZGVidWciLCJsb2dnZXIiLCJsb2ciLCJlcnJvciIsImlzQXZhaWxhYmxlIiwidmVyaWZ5Q29ubmVjdGlvbiIsInZlcmlmeSIsImdlbmVyYXRlRW1haWxUZW1wbGF0ZSIsImRhdGEiLCJwcmlvcml0eUNvbG9ycyIsInVyZ2VudCIsImhpZ2giLCJtZWRpdW0iLCJsb3ciLCJwcmlvcml0eUNvbG9yIiwicHJpb3JpdHkiLCJzdWJqZWN0IiwidGl0bGUiLCJtZXNzYWdlIiwiYWN0aW9uVXJsIiwiYWN0aW9uTGFiZWwiLCJ0eXBlIiwiRGF0ZSIsInRvTG9jYWxlU3RyaW5nIiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcCIsImtleSIsInZhbHVlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzbGljZSIsImpvaW4iLCJnZXRGdWxsWWVhciIsIk5FWFRfUFVCTElDX0FQUF9VUkwiLCJ1bnN1YnNjcmliZVVybCIsImdlbmVyYXRlUGxhaW5UZXh0RW1haWwiLCJ0ZXh0IiwiZm9yRWFjaCIsInNlbmROb3RpZmljYXRpb24iLCJyZWNpcGllbnRFbWFpbCIsIm5vdGlmaWNhdGlvbiIsInJlY2lwaWVudE5hbWUiLCJhZGRpdGlvbmFsRGF0YSIsImVtYWlsRGF0YSIsImNvbXBhbnlOYW1lIiwic3VwcG9ydEVtYWlsIiwiU1VQUE9SVF9FTUFJTCIsIm1haWxPcHRpb25zIiwiZnJvbSIsIm5hbWUiLCJhZGRyZXNzIiwiRU1BSUxfRlJPTSIsInRvIiwiaHRtbCIsImhlYWRlcnMiLCJpZCIsInJlc3VsdCIsInNlbmRNYWlsIiwibWVzc2FnZUlkIiwic2VuZEJ1bGtOb3RpZmljYXRpb25zIiwicmVjaXBpZW50cyIsInJlc3VsdHMiLCJzdWNjZXNzIiwiZmFpbGVkIiwicmVjaXBpZW50Iiwic2VudCIsImVtYWlsIiwicHVzaCIsIkVycm9yIiwic2VuZFdlbGNvbWVFbWFpbCIsInVzZXJSb2xlIiwibG9naW5VcmwiLCJub3ciLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsImFjY291bnRUeXBlIiwic2VuZFBhc3N3b3JkUmVzZXRFbWFpbCIsInJlc2V0VG9rZW4iLCJyZXNldFVybCIsImZpbmFsUmVzZXRVcmwiLCJleHBpcmVzSW4iLCJzZW5kT3JkZXJDb25maXJtYXRpb25FbWFpbCIsIm9yZGVyRGF0YSIsIm9yZGVySWQiLCJwYXJ0TmFtZSIsInF1YW50aXR5IiwidG90YWxBbW91bnQiLCJlc3RpbWF0ZWREZWxpdmVyeSIsInNlbmRTaGlwbWVudE5vdGlmaWNhdGlvbkVtYWlsIiwic2hpcG1lbnREYXRhIiwic3RhdHVzIiwiYXdiTnVtYmVyIiwic2hpcG1lbnRJZCIsIm51bUJveGVzIiwic2VuZFdhbGxldFRyYW5zYWN0aW9uRW1haWwiLCJ0cmFuc2FjdGlvbkRhdGEiLCJhbW91bnQiLCJiYWxhbmNlQWZ0ZXIiLCJ0cmFuc2FjdGlvbklkIiwicmVmZXJlbmNlIiwicmVhc29uIiwiZW1haWxTZXJ2aWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/lib/email.ts\n')},"(api)/./src/lib/notification-manager.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NotificationManager: () => (/* binding */ NotificationManager),\n/* harmony export */   notificationManager: () => (/* binding */ notificationManager),\n/* harmony export */   sendLowStockAlert: () => (/* binding */ sendLowStockAlert),\n/* harmony export */   sendShipmentNotification: () => (/* binding */ sendShipmentNotification),\n/* harmony export */   sendWalletNotification: () => (/* binding */ sendWalletNotification)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var _lib_email__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/email */ "(api)/./src/lib/email.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass NotificationManager {\n    constructor(){}\n    static getInstance() {\n        if (!NotificationManager.instance) {\n            NotificationManager.instance = new NotificationManager();\n        }\n        return NotificationManager.instance;\n    }\n    // Create and send notification\n    async createNotification(userId, type, title, message, data, config = {}) {\n        try {\n            const defaultConfig = {\n                enableEmail: true,\n                enableInApp: true,\n                enableSMS: false,\n                priority: "medium",\n                channels: [\n                    "email",\n                    "in_app"\n                ]\n            };\n            const finalConfig = {\n                ...defaultConfig,\n                ...config\n            };\n            // Get user details\n            const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                where: {\n                    id: userId\n                },\n                select: {\n                    email: true,\n                    name: true,\n                    phone: true,\n                    role: true\n                }\n            });\n            if (!user) {\n                console.error(`User not found: ${userId}`);\n                return false;\n            }\n            const notificationData = {\n                id: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n                type,\n                title,\n                message,\n                timestamp: new Date().toISOString(),\n                priority: finalConfig.priority,\n                data,\n                actionUrl: data?.actionUrl,\n                actionLabel: data?.actionLabel\n            };\n            // Create in-app notification if enabled\n            if (finalConfig.enableInApp && finalConfig.channels.includes("in_app")) {\n                await this.createInAppNotification(userId, notificationData);\n            }\n            // Send email notification if enabled\n            if (finalConfig.enableEmail && finalConfig.channels.includes("email") && user.email) {\n                await this.sendEmailNotification(user.email, user.name, notificationData);\n            }\n            // Send SMS notification if enabled (placeholder for future implementation)\n            if (finalConfig.enableSMS && finalConfig.channels.includes("sms") && user.phone) {\n                await this.sendSMSNotification(user.phone, notificationData);\n            }\n            return true;\n        } catch (error) {\n            console.error("Error creating notification:", error);\n            return false;\n        }\n    }\n    // Create in-app notification\n    async createInAppNotification(userId, notification) {\n        try {\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.notification.create({\n                data: {\n                    id: notification.id,\n                    recipients: [\n                        userId\n                    ],\n                    type: notification.type,\n                    title: notification.title,\n                    message: notification.message,\n                    data: notification.data ? JSON.stringify(notification.data) : null,\n                    priority: notification.priority,\n                    read: false,\n                    actionUrl: notification.actionUrl,\n                    createdAt: new Date(notification.timestamp)\n                }\n            });\n        } catch (error) {\n            console.error("Error creating in-app notification:", error);\n            throw error;\n        }\n    }\n    // Send email notification\n    async sendEmailNotification(email, name, notification) {\n        try {\n            await _lib_email__WEBPACK_IMPORTED_MODULE_1__["default"].sendNotification(email, notification, name);\n        } catch (error) {\n            console.error("Error sending email notification:", error);\n        // Don\'t throw error to prevent blocking other notification channels\n        }\n    }\n    // Send SMS notification (placeholder)\n    async sendSMSNotification(phone, notification) {\n        try {\n            // SMS implementation would go here\n            console.log(`SMS notification to ${phone}: ${notification.title}`);\n        } catch (error) {\n            console.error("Error sending SMS notification:", error);\n        }\n    }\n    // Shipment status change notification\n    async notifyShipmentStatusChange(shipmentId, newStatus, recipientUserId, additionalData) {\n        try {\n            const shipment = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.shipment.findUnique({\n                where: {\n                    id: shipmentId\n                },\n                include: {\n                    serviceCenter: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    distributor: {\n                        select: {\n                            name: true\n                        }\n                    },\n                    brand: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n            if (!shipment) {\n                console.error(`Shipment not found: ${shipmentId}`);\n                return false;\n            }\n            const recipientName = shipment.serviceCenter?.name || shipment.distributor?.name || "Customer";\n            const statusMessages = {\n                "INITIATED": "Your shipment has been initiated and is being prepared.",\n                "DISPATCHED": "Your shipment has been dispatched and is on its way.",\n                "IN_TRANSIT": "Your shipment is in transit.",\n                "OUT_FOR_DELIVERY": "Your shipment is out for delivery.",\n                "DELIVERED": "Your shipment has been delivered successfully.",\n                "CANCELLED": "Your shipment has been cancelled.",\n                "RETURNED": "Your shipment has been returned."\n            };\n            const message = statusMessages[newStatus] || `Your shipment status has been updated to ${newStatus}.`;\n            const priority = newStatus === "DELIVERED" ? "high" : newStatus === "CANCELLED" ? "high" : "medium";\n            return await this.createNotification(recipientUserId, "shipment_status", `Shipment Update - ${newStatus}`, message, {\n                shipmentId,\n                status: newStatus,\n                awbNumber: shipment.awbNumber,\n                brandName: shipment.brand.name,\n                recipientName,\n                actionUrl: `/dashboard?tab=shipments&shipment=${shipmentId}`,\n                actionLabel: "View Shipment",\n                ...additionalData\n            }, {\n                priority: priority\n            });\n        } catch (error) {\n            console.error("Error sending shipment status notification:", error);\n            return false;\n        }\n    }\n    // Wallet transaction notification\n    async notifyWalletTransaction(userId, transactionType, amount, balanceAfter, reference, reason) {\n        try {\n            const title = transactionType === "CREDIT" ? "Wallet Credited" : "Wallet Debited";\n            const message = `₹${amount} has been ${transactionType === "CREDIT" ? "added to" : "deducted from"} your wallet. Current balance: ₹${balanceAfter}`;\n            return await this.createNotification(userId, "wallet_transaction", title, message, {\n                transactionType,\n                amount,\n                balanceAfter,\n                reference,\n                reason,\n                actionUrl: "/dashboard?tab=wallet",\n                actionLabel: "View Wallet"\n            }, {\n                priority: transactionType === "DEBIT" ? "medium" : "low"\n            });\n        } catch (error) {\n            console.error("Error sending wallet transaction notification:", error);\n            return false;\n        }\n    }\n    // Low stock alert notification\n    async notifyLowStock(brandUserId, partId, partName, partCode, currentStock, minStockLevel) {\n        try {\n            const severity = currentStock === 0 ? "urgent" : "high";\n            const title = currentStock === 0 ? "Out of Stock Alert" : "Low Stock Alert";\n            const message = currentStock === 0 ? `${partName} (${partCode}) is out of stock. Immediate restocking required.` : `${partName} (${partCode}) is running low. Current stock: ${currentStock}, Minimum: ${minStockLevel}`;\n            return await this.createNotification(brandUserId, "low_stock", title, message, {\n                partId,\n                partName,\n                partCode,\n                currentStock,\n                minStockLevel,\n                actionUrl: "/dashboard?tab=inventory",\n                actionLabel: "Manage Inventory"\n            }, {\n                priority: severity\n            });\n        } catch (error) {\n            console.error("Error sending low stock notification:", error);\n            return false;\n        }\n    }\n    // Access request notification\n    async notifyAccessRequest(brandUserId, requesterId, requesterName, requesterRole, requestId) {\n        try {\n            const title = "New Access Request";\n            const message = `${requesterName} has requested access as a ${requesterRole.toLowerCase().replace("_", " ")}. Please review and approve/reject the request.`;\n            return await this.createNotification(brandUserId, "access_request", title, message, {\n                requesterId,\n                requesterName,\n                requesterRole,\n                requestId,\n                actionUrl: "/dashboard?tab=network",\n                actionLabel: "Review Request"\n            }, {\n                priority: "medium"\n            });\n        } catch (error) {\n            console.error("Error sending access request notification:", error);\n            return false;\n        }\n    }\n    // Return request notification\n    async notifyReturnRequest(brandUserId, returnRequestId, partName, serviceCenterName, reason) {\n        try {\n            const title = "New Return Request";\n            const message = `${serviceCenterName} has requested to return ${partName}. Reason: ${reason}`;\n            return await this.createNotification(brandUserId, "return_request", title, message, {\n                returnRequestId,\n                partName,\n                serviceCenterName,\n                reason,\n                actionUrl: "/dashboard?tab=returns",\n                actionLabel: "Review Return"\n            }, {\n                priority: "medium"\n            });\n        } catch (error) {\n            console.error("Error sending return request notification:", error);\n            return false;\n        }\n    }\n    // System alert notification\n    async notifySystemAlert(userIds, alertType, title, message, severity = "medium") {\n        try {\n            const promises = userIds.map((userId)=>this.createNotification(userId, "system_alert", title, message, {\n                    alertType,\n                    actionUrl: "/dashboard",\n                    actionLabel: "View Dashboard"\n                }, {\n                    priority: severity\n                }));\n            const results = await Promise.allSettled(promises);\n            const successCount = results.filter((r)=>r.status === "fulfilled" && r.value).length;\n            console.log(`System alert sent to ${successCount}/${userIds.length} users`);\n            return successCount > 0;\n        } catch (error) {\n            console.error("Error sending system alert:", error);\n            return false;\n        }\n    }\n    // Mark notification as read\n    async markAsRead(notificationId, userId) {\n        try {\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.notification.updateMany({\n                where: {\n                    id: notificationId,\n                    recipients: {\n                        has: userId\n                    }\n                },\n                data: {\n                    read: true,\n                    readAt: new Date()\n                }\n            });\n            return true;\n        } catch (error) {\n            console.error("Error marking notification as read:", error);\n            return false;\n        }\n    }\n    // Mark all notifications as read for a user\n    async markAllAsRead(userId) {\n        try {\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.notification.updateMany({\n                where: {\n                    recipients: {\n                        has: userId\n                    },\n                    read: false\n                },\n                data: {\n                    read: true,\n                    readAt: new Date()\n                }\n            });\n            return true;\n        } catch (error) {\n            console.error("Error marking all notifications as read:", error);\n            return false;\n        }\n    }\n    // Get user notifications\n    async getUserNotifications(userId, limit = 20, offset = 0, unreadOnly = false) {\n        try {\n            const notifications = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.notification.findMany({\n                where: {\n                    recipients: {\n                        has: userId\n                    },\n                    ...unreadOnly && {\n                        read: false\n                    }\n                },\n                orderBy: {\n                    createdAt: "desc"\n                },\n                take: limit,\n                skip: offset\n            });\n            return notifications.map((notif)=>({\n                    ...notif,\n                    data: notif.data ? JSON.parse(notif.data) : null\n                }));\n        } catch (error) {\n            console.error("Error fetching user notifications:", error);\n            return [];\n        }\n    }\n    // Get unread count\n    async getUnreadCount(userId) {\n        try {\n            return await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.notification.count({\n                where: {\n                    recipients: {\n                        has: userId\n                    },\n                    read: false\n                }\n            });\n        } catch (error) {\n            console.error("Error getting unread count:", error);\n            return 0;\n        }\n    }\n    // Clean up old notifications (older than 90 days)\n    async cleanupOldNotifications() {\n        try {\n            const ninetyDaysAgo = new Date();\n            ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\n            const result = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.notification.deleteMany({\n                where: {\n                    createdAt: {\n                        lt: ninetyDaysAgo\n                    }\n                }\n            });\n            console.log(`Cleaned up ${result.count} old notifications`);\n            return result.count;\n        } catch (error) {\n            console.error("Error cleaning up old notifications:", error);\n            return 0;\n        }\n    }\n}\n// Export singleton instance\nconst notificationManager = NotificationManager.getInstance();\n// Utility functions\nasync function sendShipmentNotification(shipmentId, newStatus, recipientUserId, additionalData) {\n    return notificationManager.notifyShipmentStatusChange(shipmentId, newStatus, recipientUserId, additionalData);\n}\nasync function sendWalletNotification(userId, transactionType, amount, balanceAfter, reference, reason) {\n    return notificationManager.notifyWalletTransaction(userId, transactionType, amount, balanceAfter, reference, reason);\n}\nasync function sendLowStockAlert(brandUserId, partId, partName, partCode, currentStock, minStockLevel) {\n    return notificationManager.notifyLowStock(brandUserId, partId, partName, partCode, currentStock, minStockLevel);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/notification-manager.ts\n')},"(api)/./src/lib/prisma.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/edge */ "@prisma/client/edge");\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/extension-accelerate */ "@prisma/extension-accelerate");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__]);\n_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__.PrismaClient().$extends((0,_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__.withAccelerate)());\nif (true) globalForPrisma.prisma = prisma;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtEO0FBQ1c7QUFFN0QsTUFBTUUsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSiw2REFBWUEsR0FBR0ssUUFBUSxDQUFDSiw0RUFBY0EsSUFBRztBQUU3RixJQUFJSyxJQUF5QixFQUFjSixnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8uL3NyYy9saWIvcHJpc21hLnRzPzAxZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQvZWRnZSdcclxuaW1wb3J0IHsgd2l0aEFjY2VsZXJhdGUgfSBmcm9tICdAcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlJ1xyXG5cclxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcclxuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCkuJGV4dGVuZHMod2l0aEFjY2VsZXJhdGUoKSlcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsIndpdGhBY2NlbGVyYXRlIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsIiRleHRlbmRzIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/prisma.ts\n')},"(api)/./src/pages/api/notifications.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/auth */ "(api)/./src/lib/auth.ts");\n/* harmony import */ var _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/notification-manager */ "(api)/./src/lib/notification-manager.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_auth__WEBPACK_IMPORTED_MODULE_0__, _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_auth__WEBPACK_IMPORTED_MODULE_0__, _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nasync function handler(req, res) {\n    try {\n        const user = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_0__.verifyToken)(req);\n        if (!user) {\n            return res.status(401).json({\n                error: "Unauthorized"\n            });\n        }\n        if (req.method === "GET") {\n            const { limit = "20", offset = "0", unreadOnly = "false", type } = req.query;\n            const limitNum = parseInt(limit);\n            const offsetNum = parseInt(offset);\n            const unreadOnlyBool = unreadOnly === "true";\n            // Get user notifications\n            let notifications = await _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.getUserNotifications(user.id, limitNum, offsetNum, unreadOnlyBool);\n            // Filter by type if specified\n            if (type && type !== "all") {\n                notifications = notifications.filter((n)=>n.type === type);\n            }\n            // Get unread count\n            const unreadCount = await _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.getUnreadCount(user.id);\n            return res.status(200).json({\n                success: true,\n                notifications,\n                unreadCount,\n                pagination: {\n                    limit: limitNum,\n                    offset: offsetNum,\n                    hasMore: notifications.length === limitNum\n                }\n            });\n        }\n        if (req.method === "POST") {\n            const { action, notificationId, notificationIds } = req.body;\n            switch(action){\n                case "markAsRead":\n                    if (!notificationId) {\n                        return res.status(400).json({\n                            error: "Notification ID required"\n                        });\n                    }\n                    const markResult = await _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.markAsRead(notificationId, user.id);\n                    return res.status(200).json({\n                        success: markResult,\n                        message: markResult ? "Notification marked as read" : "Failed to mark notification as read"\n                    });\n                case "markAllAsRead":\n                    const markAllResult = await _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.markAllAsRead(user.id);\n                    return res.status(200).json({\n                        success: markAllResult,\n                        message: markAllResult ? "All notifications marked as read" : "Failed to mark all notifications as read"\n                    });\n                case "markMultipleAsRead":\n                    if (!notificationIds || !Array.isArray(notificationIds)) {\n                        return res.status(400).json({\n                            error: "Notification IDs array required"\n                        });\n                    }\n                    const results = await Promise.allSettled(notificationIds.map((id)=>_lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.markAsRead(id, user.id)));\n                    const successCount = results.filter((r)=>r.status === "fulfilled" && r.value).length;\n                    return res.status(200).json({\n                        success: successCount > 0,\n                        message: `${successCount}/${notificationIds.length} notifications marked as read`,\n                        successCount,\n                        totalCount: notificationIds.length\n                    });\n                case "createTestNotification":\n                    // Only allow for development/testing\n                    if (false) {}\n                    const testResult = await _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.createNotification(user.id, "test", "Test Notification", "This is a test notification to verify the system is working correctly.", {\n                        testData: true,\n                        timestamp: new Date().toISOString(),\n                        actionUrl: "/dashboard",\n                        actionLabel: "View Dashboard"\n                    });\n                    return res.status(200).json({\n                        success: testResult,\n                        message: testResult ? "Test notification created" : "Failed to create test notification"\n                    });\n                default:\n                    return res.status(400).json({\n                        error: "Invalid action"\n                    });\n            }\n        }\n        if (req.method === "DELETE") {\n            const { notificationId } = req.query;\n            if (!notificationId) {\n                return res.status(400).json({\n                    error: "Notification ID required"\n                });\n            }\n            // For now, we\'ll just mark as read instead of deleting\n            // In the future, we could implement soft delete\n            const deleteResult = await _lib_notification_manager__WEBPACK_IMPORTED_MODULE_1__.notificationManager.markAsRead(notificationId, user.id);\n            return res.status(200).json({\n                success: deleteResult,\n                message: deleteResult ? "Notification removed" : "Failed to remove notification"\n            });\n        }\n        return res.status(405).json({\n            error: "Method not allowed"\n        });\n    } catch (error) {\n        console.error("Notifications API error:", error);\n        return res.status(500).json({\n            error: "Internal server error",\n            details: error instanceof Error ? error.message : "Unknown error"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/notifications.ts\n')}};var __webpack_require__=require("../../webpack-api-runtime.js");__webpack_require__.C(exports);var __webpack_exec__=c=>__webpack_require__(__webpack_require__.s=c),__webpack_exports__=__webpack_require__.X(0,["vendor-chunks/next"],()=>__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fnotifications&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cnotifications.ts&middlewareConfigBase64=e30%3D!"));module.exports=__webpack_exports__})();