"use strict";(()=>{var exports={};exports.id="pages/api/reverse-requests",exports.ids=["pages/api/reverse-requests"],exports.modules={"@prisma/client/edge":c=>{c.exports=require("@prisma/client/edge")},"next/dist/compiled/next-server/pages-api.runtime.dev.js":c=>{c.exports=require("next/dist/compiled/next-server/pages-api.runtime.dev.js")},"@prisma/extension-accelerate":c=>{c.exports=import("@prisma/extension-accelerate")},"(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freverse-requests&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Creverse-requests.ts&middlewareConfigBase64=e30%3D!":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ "(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ "(api)/./node_modules/next/dist/server/future/route-kind.js");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ "(api)/./node_modules/next/dist/build/templates/helpers.js");\n/* harmony import */ var _src_pages_api_reverse_requests_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\reverse-requests.ts */ "(api)/./src/pages/api/reverse-requests.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_reverse_requests_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_reverse_requests_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_reverse_requests_ts__WEBPACK_IMPORTED_MODULE_3__, "default"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_reverse_requests_ts__WEBPACK_IMPORTED_MODULE_3__, "config");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: "/api/reverse-requests",\n        pathname: "/api/reverse-requests",\n        // The following aren\'t used in production.\n        bundlePath: "",\n        filename: ""\n    },\n    userland: _src_pages_api_reverse_requests_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnJldmVyc2UtcmVxdWVzdHMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlNUNwYWdlcyU1Q2FwaSU1Q3JldmVyc2UtcmVxdWVzdHMudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDbUU7QUFDbkU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLCtEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQywrREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8/N2VhOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxyZXZlcnNlLXJlcXVlc3RzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcmV2ZXJzZS1yZXF1ZXN0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3JldmVyc2UtcmVxdWVzdHNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freverse-requests&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Creverse-requests.ts&middlewareConfigBase64=e30%3D!\n')},"(api)/./src/lib/enhanced-wallet.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminWalletAdjustment: () => (/* binding */ adminWalletAdjustment),\n/* harmony export */   checkEnhancedWalletBalance: () => (/* binding */ checkEnhancedWalletBalance),\n/* harmony export */   checkWalletBalance: () => (/* binding */ checkWalletBalance),\n/* harmony export */   creditToWallet: () => (/* binding */ creditToWallet),\n/* harmony export */   debugWalletConsistency: () => (/* binding */ debugWalletConsistency),\n/* harmony export */   deductFromWallet: () => (/* binding */ deductFromWallet),\n/* harmony export */   getOrCreateWallet: () => (/* binding */ getOrCreateWallet),\n/* harmony export */   getWalletSummary: () => (/* binding */ getWalletSummary),\n/* harmony export */   getWalletTransactions: () => (/* binding */ getWalletTransactions),\n/* harmony export */   processReturnCourierCost: () => (/* binding */ processReturnCourierCost),\n/* harmony export */   refundToWallet: () => (/* binding */ refundToWallet)\n/* harmony export */ });\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prisma */ "(api)/./src/lib/prisma.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_prisma__WEBPACK_IMPORTED_MODULE_0__]);\n_prisma__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Enhanced Wallet Management Service\n// Unified wallet system that handles balance checks, deductions, and transaction logging\n// Fixes the wallet balance mismatch issue between display and shipment creation\n\n// Get or create wallet for a user\nasync function getOrCreateWallet(userId) {\n    try {\n        let wallet = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.wallet.findUnique({\n            where: {\n                userId\n            }\n        });\n        if (!wallet) {\n            console.log(`Creating new wallet for user: ${userId}`);\n            wallet = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.wallet.create({\n                data: {\n                    userId,\n                    balance: 0,\n                    totalEarned: 0,\n                    totalSpent: 0,\n                    lastRecharge: null\n                }\n            });\n        }\n        return {\n            userId: wallet.userId,\n            balance: wallet.balance,\n            totalEarned: wallet.totalEarned,\n            totalSpent: wallet.totalSpent,\n            lastRecharge: wallet.lastRecharge,\n            createdAt: wallet.createdAt,\n            updatedAt: wallet.updatedAt\n        };\n    } catch (error) {\n        console.error("Error getting or creating wallet:", error);\n        throw new Error(`Failed to get or create wallet: ${error instanceof Error ? error.message : "Unknown error"}`);\n    }\n}\n// Check wallet balance with detailed information\nasync function checkWalletBalance(userId, requiredAmount) {\n    try {\n        console.log(`Checking wallet balance for user: ${userId}, required: â‚¹${requiredAmount}`);\n        const wallet = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.wallet.findUnique({\n            where: {\n                userId\n            }\n        });\n        if (!wallet) {\n            console.log(`No wallet found for user: ${userId}`);\n            return {\n                sufficient: false,\n                currentBalance: 0,\n                shortfall: requiredAmount,\n                walletExists: false\n            };\n        }\n        const sufficient = wallet.balance >= requiredAmount;\n        const shortfall = sufficient ? undefined : requiredAmount - wallet.balance;\n        console.log(`Wallet check result - Balance: â‚¹${wallet.balance}, Required: â‚¹${requiredAmount}, Sufficient: ${sufficient}`);\n        return {\n            sufficient,\n            currentBalance: wallet.balance,\n            shortfall,\n            walletExists: true\n        };\n    } catch (error) {\n        console.error("Error checking wallet balance:", error);\n        return {\n            sufficient: false,\n            currentBalance: 0,\n            shortfall: requiredAmount,\n            walletExists: false\n        };\n    }\n}\n// Deduct amount from wallet with comprehensive logging\nasync function deductFromWallet(userId, amount, description, referenceId) {\n    try {\n        console.log(`Attempting to deduct â‚¹${amount} from wallet for user: ${userId}`);\n        console.log(`Description: ${description}`);\n        console.log(`Reference ID: ${referenceId || "None"}`);\n        // Check balance first\n        const balanceCheck = await checkWalletBalance(userId, amount);\n        if (!balanceCheck.sufficient) {\n            const error = `Insufficient wallet balance. Required: â‚¹${amount}, Available: â‚¹${balanceCheck.currentBalance}`;\n            console.error(error);\n            return {\n                success: false,\n                error,\n                details: {\n                    requiredAmount: amount,\n                    availableBalance: balanceCheck.currentBalance,\n                    shortfall: balanceCheck.shortfall,\n                    walletExists: balanceCheck.walletExists\n                }\n            };\n        }\n        // Perform deduction in a transaction\n        const result = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n            // Update wallet balance\n            const updatedWallet = await tx.wallet.update({\n                where: {\n                    userId\n                },\n                data: {\n                    balance: {\n                        decrement: amount\n                    },\n                    totalSpent: {\n                        increment: amount\n                    }\n                }\n            });\n            console.log(`Wallet updated - New balance: â‚¹${updatedWallet.balance}`);\n            // Log the transaction\n            const transaction = await tx.walletTransaction.create({\n                data: {\n                    userId,\n                    type: "DEBIT",\n                    amount,\n                    description,\n                    balanceAfter: updatedWallet.balance,\n                    status: "COMPLETED",\n                    purchaseOrderId: referenceId\n                }\n            });\n            console.log(`Transaction logged with ID: ${transaction.id}`);\n            return {\n                newBalance: updatedWallet.balance,\n                transactionId: transaction.id\n            };\n        });\n        return {\n            success: true,\n            newBalance: result.newBalance,\n            transactionId: result.transactionId,\n            details: {\n                deductedAmount: amount,\n                previousBalance: balanceCheck.currentBalance,\n                newBalance: result.newBalance\n            }\n        };\n    } catch (error) {\n        console.error("Error deducting from wallet:", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : "Wallet deduction failed",\n            details: {\n                originalError: error\n            }\n        };\n    }\n}\n// Credit amount to wallet (for recharges)\nasync function creditToWallet(userId, amount, description = "Wallet Recharge", referenceId) {\n    try {\n        console.log(`Crediting â‚¹${amount} to wallet for user: ${userId}`);\n        console.log(`Description: ${description}`);\n        // Ensure wallet exists\n        await getOrCreateWallet(userId);\n        const result = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n            // Update wallet balance and last recharge date\n            const updatedWallet = await tx.wallet.update({\n                where: {\n                    userId\n                },\n                data: {\n                    balance: {\n                        increment: amount\n                    },\n                    totalEarned: {\n                        increment: amount\n                    },\n                    lastRecharge: new Date()\n                }\n            });\n            // Log the credit transaction\n            const transaction = await tx.walletTransaction.create({\n                data: {\n                    userId,\n                    type: "CREDIT",\n                    amount,\n                    description,\n                    balanceAfter: updatedWallet.balance,\n                    status: "COMPLETED",\n                    purchaseOrderId: referenceId\n                }\n            });\n            return {\n                newBalance: updatedWallet.balance,\n                transactionId: transaction.id\n            };\n        });\n        console.log(`Credit successful - New balance: â‚¹${result.newBalance}`);\n        return {\n            success: true,\n            newBalance: result.newBalance,\n            transactionId: result.transactionId,\n            details: {\n                creditedAmount: amount,\n                newBalance: result.newBalance\n            }\n        };\n    } catch (error) {\n        console.error("Error crediting to wallet:", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : "Wallet credit failed",\n            details: {\n                originalError: error\n            }\n        };\n    }\n}\n// Refund amount to wallet (in case of API failure)\nasync function refundToWallet(userId, amount, description, referenceId) {\n    try {\n        console.log(`Refunding â‚¹${amount} to wallet for user: ${userId}`);\n        console.log(`Description: ${description}`);\n        const result = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n            // Update wallet balance\n            const updatedWallet = await tx.wallet.update({\n                where: {\n                    userId\n                },\n                data: {\n                    balance: {\n                        increment: amount\n                    },\n                    totalSpent: {\n                        decrement: amount\n                    }\n                }\n            });\n            // Log the refund transaction\n            const transaction = await tx.walletTransaction.create({\n                data: {\n                    userId,\n                    type: "CREDIT",\n                    amount,\n                    description: `REFUND: ${description}`,\n                    balanceAfter: updatedWallet.balance,\n                    status: "COMPLETED",\n                    purchaseOrderId: referenceId\n                }\n            });\n            return {\n                newBalance: updatedWallet.balance,\n                transactionId: transaction.id\n            };\n        });\n        console.log(`Refund successful - New balance: â‚¹${result.newBalance}`);\n        return {\n            success: true,\n            newBalance: result.newBalance,\n            transactionId: result.transactionId,\n            details: {\n                refundedAmount: amount,\n                newBalance: result.newBalance\n            }\n        };\n    } catch (error) {\n        console.error("Error refunding to wallet:", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : "Wallet refund failed",\n            details: {\n                originalError: error\n            }\n        };\n    }\n}\n// Get wallet transaction history\nasync function getWalletTransactions(userId, limit = 50, offset = 0) {\n    try {\n        const transactions = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.walletTransaction.findMany({\n            where: {\n                userId\n            },\n            orderBy: {\n                createdAt: "desc"\n            },\n            take: limit,\n            skip: offset\n        });\n        return transactions.map((t)=>({\n                id: t.id,\n                userId: t.userId,\n                type: t.type,\n                amount: t.amount,\n                description: t.description,\n                balanceAfter: t.balanceAfter,\n                status: t.status,\n                createdAt: t.createdAt,\n                purchaseOrderId: t.purchaseOrderId || undefined\n            }));\n    } catch (error) {\n        console.error("Error fetching wallet transactions:", error);\n        return [];\n    }\n}\n// Get wallet summary with detailed breakdown\nasync function getWalletSummary(userId) {\n    try {\n        const wallet = await getOrCreateWallet(userId);\n        const transactions = await getWalletTransactions(userId, 10);\n        // Calculate summary from transactions\n        const allTransactions = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.walletTransaction.findMany({\n            where: {\n                userId\n            },\n            select: {\n                type: true,\n                amount: true,\n                createdAt: true\n            }\n        });\n        const totalCredits = allTransactions.filter((t)=>t.type === "CREDIT").reduce((sum, t)=>sum + t.amount, 0);\n        const totalDebits = allTransactions.filter((t)=>t.type === "DEBIT").reduce((sum, t)=>sum + t.amount, 0);\n        const lastTransactionDate = allTransactions.length > 0 ? allTransactions.sort((a, b)=>b.createdAt.getTime() - a.createdAt.getTime())[0].createdAt : null;\n        return {\n            wallet,\n            recentTransactions: transactions,\n            summary: {\n                totalCredits,\n                totalDebits,\n                transactionCount: allTransactions.length,\n                lastTransactionDate\n            }\n        };\n    } catch (error) {\n        console.error("Error getting wallet summary:", error);\n        throw new Error(`Failed to get wallet summary: ${error instanceof Error ? error.message : "Unknown error"}`);\n    }\n}\n// Debug function to check wallet consistency\nasync function debugWalletConsistency(userId) {\n    try {\n        console.log(`=== WALLET DEBUG FOR USER: ${userId} ===`);\n        const wallet = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.wallet.findUnique({\n            where: {\n                userId\n            }\n        });\n        const transactions = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.walletTransaction.findMany({\n            where: {\n                userId\n            },\n            orderBy: {\n                createdAt: "asc"\n            }\n        });\n        let calculatedBalance = 0;\n        const issues = [];\n        // Calculate balance from transactions\n        for (const transaction of transactions){\n            if (transaction.type === "CREDIT") {\n                calculatedBalance += transaction.amount;\n            } else {\n                calculatedBalance -= transaction.amount;\n            }\n        }\n        const lastTransaction = transactions.length > 0 ? transactions[transactions.length - 1] : null;\n        // Check consistency\n        const isConsistent = wallet ? Math.abs(wallet.balance - calculatedBalance) < 0.01 : calculatedBalance === 0;\n        if (!wallet) {\n            issues.push("Wallet record does not exist");\n        } else {\n            if (!isConsistent) {\n                issues.push(`Balance mismatch: Wallet shows â‚¹${wallet.balance}, calculated â‚¹${calculatedBalance}`);\n            }\n            if (lastTransaction && Math.abs(lastTransaction.balanceAfter - wallet.balance) > 0.01) {\n                issues.push(`Last transaction balance mismatch: Transaction shows â‚¹${lastTransaction.balanceAfter}, wallet shows â‚¹${wallet.balance}`);\n            }\n        }\n        console.log(`Wallet exists: ${!!wallet}`);\n        console.log(`Stored balance: â‚¹${wallet?.balance || 0}`);\n        console.log(`Calculated balance: â‚¹${calculatedBalance}`);\n        console.log(`Transaction count: ${transactions.length}`);\n        console.log(`Is consistent: ${isConsistent}`);\n        console.log(`Issues: ${issues.length > 0 ? issues.join(", ") : "None"}`);\n        return {\n            walletData: wallet ? {\n                userId: wallet.userId,\n                balance: wallet.balance,\n                totalEarned: wallet.totalEarned,\n                totalSpent: wallet.totalSpent,\n                lastRecharge: wallet.lastRecharge,\n                createdAt: wallet.createdAt,\n                updatedAt: wallet.updatedAt\n            } : null,\n            calculatedBalance,\n            transactionCount: transactions.length,\n            lastTransaction: lastTransaction ? {\n                id: lastTransaction.id,\n                userId: lastTransaction.userId,\n                type: lastTransaction.type,\n                amount: lastTransaction.amount,\n                description: lastTransaction.description,\n                balanceAfter: lastTransaction.balanceAfter,\n                status: lastTransaction.status,\n                createdAt: lastTransaction.createdAt,\n                purchaseOrderId: lastTransaction.purchaseOrderId || undefined\n            } : null,\n            isConsistent,\n            issues\n        };\n    } catch (error) {\n        console.error("Error debugging wallet consistency:", error);\n        throw error;\n    }\n}\n// Check enhanced wallet balance (alias for checkWalletBalance)\nasync function checkEnhancedWalletBalance(userId, requiredAmount) {\n    return checkWalletBalance(userId, requiredAmount);\n}\n// Process return courier cost\nasync function processReturnCourierCost(userId, amount, returnReason, costResponsibility, referenceId) {\n    try {\n        console.log(`Processing return courier cost for user: ${userId}`);\n        console.log(`Amount: â‚¹${amount}, Reason: ${returnReason}, Responsibility: ${costResponsibility}`);\n        // Determine who pays based on cost responsibility\n        if (costResponsibility === "BRAND") {\n            // Brand pays - no deduction from user wallet\n            return {\n                success: true,\n                details: {\n                    message: "Return cost covered by brand",\n                    costResponsibility,\n                    amount\n                }\n            };\n        } else if (costResponsibility === "SERVICE_CENTER") {\n            // Service center pays - deduct from their wallet\n            return await deductFromWallet(userId, amount, `Return courier cost - ${returnReason}`, referenceId);\n        } else {\n            // Customer pays - handle separately or return error\n            return {\n                success: false,\n                error: "Customer payment not handled through wallet system",\n                details: {\n                    costResponsibility,\n                    amount\n                }\n            };\n        }\n    } catch (error) {\n        console.error("Error processing return courier cost:", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : "Failed to process return courier cost",\n            details: {\n                originalError: error\n            }\n        };\n    }\n}\n// Admin wallet adjustment function\nasync function adminWalletAdjustment(userId, amount, type, description, adminId) {\n    try {\n        console.log(`Admin wallet adjustment for user: ${userId}`);\n        console.log(`Type: ${type}, Amount: â‚¹${amount}, Admin: ${adminId}`);\n        const adjustmentDescription = `ADMIN ADJUSTMENT by ${adminId}: ${description}`;\n        if (type === "CREDIT") {\n            return await creditToWallet(userId, amount, adjustmentDescription);\n        } else {\n            return await deductFromWallet(userId, amount, adjustmentDescription);\n        }\n    } catch (error) {\n        console.error("Error in admin wallet adjustment:", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : "Admin wallet adjustment failed",\n            details: {\n                originalError: error\n            }\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/enhanced-wallet.ts\n')},"(api)/./src/lib/prisma.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client/edge */ "@prisma/client/edge");\n/* harmony import */ var _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @prisma/extension-accelerate */ "@prisma/extension-accelerate");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__]);\n_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client_edge__WEBPACK_IMPORTED_MODULE_0__.PrismaClient().$extends((0,_prisma_extension_accelerate__WEBPACK_IMPORTED_MODULE_1__.withAccelerate)());\nif (true) globalForPrisma.prisma = prisma;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtEO0FBQ1c7QUFFN0QsTUFBTUUsa0JBQWtCQztBQUlqQixNQUFNQyxTQUFTRixnQkFBZ0JFLE1BQU0sSUFBSSxJQUFJSiw2REFBWUEsR0FBR0ssUUFBUSxDQUFDSiw0RUFBY0EsSUFBRztBQUU3RixJQUFJSyxJQUF5QixFQUFjSixnQkFBZ0JFLE1BQU0sR0FBR0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LXBhZ2VzLWNoYWtyYS8uL3NyYy9saWIvcHJpc21hLnRzPzAxZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQvZWRnZSdcclxuaW1wb3J0IHsgd2l0aEFjY2VsZXJhdGUgfSBmcm9tICdAcHJpc21hL2V4dGVuc2lvbi1hY2NlbGVyYXRlJ1xyXG5cclxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcclxuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCkuJGV4dGVuZHMod2l0aEFjY2VsZXJhdGUoKSlcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSBnbG9iYWxGb3JQcmlzbWEucHJpc21hID0gcHJpc21hIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsIndpdGhBY2NlbGVyYXRlIiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsIiRleHRlbmRzIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/prisma.ts\n')},"(api)/./src/pages/api/reverse-requests.ts":(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ "(api)/./src/lib/prisma.ts");\n/* harmony import */ var _lib_enhanced_wallet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/enhanced-wallet */ "(api)/./src/lib/enhanced-wallet.ts");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__, _lib_enhanced_wallet__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_prisma__WEBPACK_IMPORTED_MODULE_0__, _lib_enhanced_wallet__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n// Function to determine cost responsibility based on return reason\nfunction determineReturnCostResponsibility(returnReason) {\n    switch(returnReason){\n        case "DEFECTIVE":\n        case "WRONG_PART":\n        case "QUALITY_ISSUE":\n        case "DAMAGED":\n            return "BRAND"; // Brand pays for defective/wrong parts\n        case "EXCESS_STOCK":\n        case "INVENTORY_CLEANUP":\n            return "SERVICE_CENTER"; // Service center pays for excess inventory\n        case "CUSTOMER_RETURN":\n            return "CUSTOMER"; // Customer pays for their returns\n        default:\n            return "SERVICE_CENTER"; // Default fallback\n    }\n}\n// Function to estimate return courier cost (simplified for now)\nfunction estimateReturnCourierCost(weight = 1) {\n    // DTDC reverse logistics pricing: â‚¹100 docket + â‚¹65/kg\n    const docketCharge = 100;\n    const perKgCharge = 65;\n    return docketCharge + Math.ceil(weight) * perKgCharge;\n}\nasync function handler(req, res) {\n    if (req.method === "GET") {\n        try {\n            const { brandId, serviceCenterId } = req.query;\n            let whereClause = {};\n            // Filter by brand if brandId is provided\n            if (brandId) {\n                whereClause.part = {\n                    brandId: brandId\n                };\n            }\n            // Filter by service center if serviceCenterId is provided\n            if (serviceCenterId) {\n                whereClause.serviceCenterId = serviceCenterId;\n            }\n            const reverseRequests = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.reverseRequest.findMany({\n                where: whereClause,\n                include: {\n                    serviceCenter: true,\n                    part: {\n                        include: {\n                            brand: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: "desc"\n                }\n            });\n            res.status(200).json(reverseRequests);\n        } catch (error) {\n            console.error("Error fetching reverse requests:", error);\n            res.status(500).json({\n                error: "Failed to fetch reverse requests"\n            });\n        }\n    } else if (req.method === "POST") {\n        try {\n            const { serviceCenterId, partId, reason, returnReason, status, quantity, weight, processPayment } = req.body;\n            // Validate required fields\n            if (!serviceCenterId || !partId || !reason) {\n                return res.status(400).json({\n                    error: "Missing required fields: serviceCenterId, partId, reason"\n                });\n            }\n            // Determine cost responsibility based on return reason\n            const costResponsibility = returnReason ? determineReturnCostResponsibility(returnReason) : "SERVICE_CENTER";\n            // Estimate courier cost\n            const estimatedCourierCost = estimateReturnCourierCost(weight || 1);\n            // If processPayment is true, check wallet balance and process payment\n            let walletDeductionResult = null;\n            if (processPayment) {\n                // Determine who pays\n                let payerId;\n                if (costResponsibility === "BRAND") {\n                    // Get brand ID from part\n                    const part = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.part.findUnique({\n                        where: {\n                            id: partId\n                        },\n                        select: {\n                            brandId: true\n                        }\n                    });\n                    if (!part) {\n                        return res.status(400).json({\n                            error: "Part not found"\n                        });\n                    }\n                    payerId = part.brandId;\n                } else if (costResponsibility === "SERVICE_CENTER") {\n                    payerId = serviceCenterId;\n                } else {\n                    return res.status(400).json({\n                        error: "Customer payment not supported in this version"\n                    });\n                }\n                // Check wallet balance\n                const balanceCheck = await (0,_lib_enhanced_wallet__WEBPACK_IMPORTED_MODULE_1__.checkEnhancedWalletBalance)(payerId, estimatedCourierCost);\n                if (!balanceCheck || !balanceCheck.sufficient) {\n                    return res.status(400).json({\n                        error: "Insufficient wallet balance",\n                        required: estimatedCourierCost,\n                        available: balanceCheck?.currentBalance || 0,\n                        shortfall: balanceCheck?.shortfall || estimatedCourierCost\n                    });\n                }\n            }\n            const reverseRequest = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.reverseRequest.create({\n                data: {\n                    serviceCenterId,\n                    partId,\n                    reason,\n                    returnReason: returnReason || null,\n                    costResponsibility,\n                    courierCost: processPayment ? estimatedCourierCost : null,\n                    quantity: quantity || 1,\n                    status: status || "REQUESTED"\n                },\n                include: {\n                    serviceCenter: true,\n                    part: {\n                        include: {\n                            brand: true\n                        }\n                    }\n                }\n            });\n            // Process wallet deduction if requested\n            if (processPayment) {\n                walletDeductionResult = await (0,_lib_enhanced_wallet__WEBPACK_IMPORTED_MODULE_1__.processReturnCourierCost)(reverseRequest.id, estimatedCourierCost, false // not admin override\n                );\n                if (!walletDeductionResult.success) {\n                    // Rollback the reverse request creation\n                    await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.reverseRequest.delete({\n                        where: {\n                            id: reverseRequest.id\n                        }\n                    });\n                    return res.status(400).json({\n                        error: "Wallet deduction failed",\n                        details: walletDeductionResult.error\n                    });\n                }\n            }\n            res.status(201).json({\n                success: true,\n                reverseRequest,\n                costInfo: {\n                    costResponsibility,\n                    estimatedCourierCost,\n                    message: `Courier cost will be borne by: ${costResponsibility.replace("_", " ")}`,\n                    walletDeducted: processPayment,\n                    walletResult: walletDeductionResult\n                }\n            });\n        } catch (error) {\n            console.error("Error creating reverse request:", error);\n            res.status(500).json({\n                error: "Failed to create reverse request"\n            });\n        }\n    } else if (req.method === "PUT") {\n        try {\n            const { id, status, awbNumber, courierCost, paidBy } = req.body;\n            if (!id) {\n                return res.status(400).json({\n                    error: "Request ID is required"\n                });\n            }\n            const updateData = {};\n            if (status) updateData.status = status;\n            if (awbNumber) updateData.awbNumber = awbNumber;\n            if (courierCost !== undefined) updateData.courierCost = courierCost;\n            if (paidBy) updateData.paidBy = paidBy;\n            const reverseRequest = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.reverseRequest.update({\n                where: {\n                    id\n                },\n                data: updateData,\n                include: {\n                    serviceCenter: true,\n                    part: {\n                        include: {\n                            brand: true\n                        }\n                    }\n                }\n            });\n            res.status(200).json(reverseRequest);\n        } catch (error) {\n            console.error("Error updating reverse request:", error);\n            res.status(500).json({\n                error: "Failed to update reverse request"\n            });\n        }\n    } else {\n        res.setHeader("Allow", [\n            "GET",\n            "POST",\n            "PUT"\n        ]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/reverse-requests.ts\n')}};var __webpack_require__=require("../../webpack-api-runtime.js");__webpack_require__.C(exports);var __webpack_exec__=c=>__webpack_require__(__webpack_require__.s=c),__webpack_exports__=__webpack_require__.X(0,["vendor-chunks/next"],()=>__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freverse-requests&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Creverse-requests.ts&middlewareConfigBase64=e30%3D!"));module.exports=__webpack_exports__})();